% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aa_trees.R
\name{recursive_construct_tree}
\alias{recursive_construct_tree}
\title{Recursively construct a tree}
\usage{
recursive_construct_tree(info_from_parent, f, path = "root")
}
\arguments{
\item{info_from_parent}{info passed on to this node from parent}

\item{f}{\code{function(info_from_parent, path) -> list(name, content, info_to_children_lst, label)}
that returns the name, label, the content and the info to pass down to the children
(the latter is a named list with one entry per child)
a child can get its name (as desired by the parent) by looking at \code{path[[length(path)]]}}

\item{path}{to node (character string of node names leading to it)}
}
\description{
Recursively construct a tree
}
\examples{
i <- 0
res <- recursive_construct_tree(
  1:7,
  function(info_from_parent, path) {
    i <<- i + 1
    info_to_children_lst <- if (length(info_from_parent) > 1) {
      split(info_from_parent, seq_along(info_from_parent) \%\% 3)
    } else {
      NULL
    }
    list(
      name = toString(i),
      content = info_from_parent,
      info_to_children_lst = info_to_children_lst
    )
  },
  path = "root"
)
cat(displayable(res))

res <- recursive_construct_tree(
  1:7,
  function(info_from_parent, path) {
    info_to_children_lst <- if (length(info_from_parent) > 1) {
      split(info_from_parent, seq_along(info_from_parent) \%\% 3)
    } else {
      NULL
    }
    list(
      name = path[[length(path)]],
      content = info_from_parent,
      info_to_children_lst = info_to_children_lst
    )
  },
  path = "root"
)
cat(displayable(res))
}
