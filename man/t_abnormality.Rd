% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/t_abnormality.R
\name{t_abnormality}
\alias{t_abnormality}
\title{Abnormality Table}
\usage{
t_abnormality(
  grade,
  abnormal = c("L", "H"),
  baseline,
  id,
  exclude_base_abn = FALSE,
  col_by,
  row_by,
  col_N = NULL,
  total = NULL,
  table_tree = FALSE
)
}
\arguments{
\item{grade}{a vector specifying the grades. Fill blank with NA using
\code{sas_na()}.}

\item{abnormal}{a vector specifying the unique values that
represent abnormality in the order of display.}

\item{baseline}{a vector with length of \code{nrow(grade)} specifying
the baseline grade for each record. Fill blank with NA using \code{sas_na()}.}

\item{id}{a vector of subject identifier with length of \code{nrow(grade)}}

\item{exclude_base_abn}{boolean to specify whether to exclude subjects with
baseline abnormality in denominator. Default is \code{FALSE}.}

\item{col_by}{(\code{logical}, \code{factor} or \code{data.frame})\cr
Contains reference and comparison group information, the
first \code{level} indicates the reference group. See the functions
\code{\link[rtables]{col_by_to_matrix}} and \code{\link[rtables]{by_add_total}}.}

\item{row_by}{(\code{factor} or \code{data.frame})\cr
Defines how data from \code{x} is split into sub-tables. Dimensions must match
dimensions of \code{x} and no missing values are allowed. Multi-level nesting is possible when
\code{row_by} is a \code{data.frame}. Columns should be ordered with the first column specifying
the first variable to split by and the last column the specifying the last variable to split by.}

\item{col_N}{(\code{integer} vector)\cr
Contains the reference population per level of \code{col_by}. This by default is often
set to \code{get_N(col_by)}. Names of the list are ignored, they are added in the order they appear.
The default may not appropriate and should be modified by the user when \code{col_by} contains
more than one record per subject.}

\item{total}{(\code{character} value)\cr
Denotes column name of an added total column using \code{\link[rtables]{by_add_total}} to
\code{col_by} and \code{\link{col_N_add_total}} to \code{col_N}. If \code{NULL} no total column is added.}

\item{table_tree}{(\code{logical} value)\cr
If \code{FALSE} then a single \code{rtable} gets returned, if \code{TRUE} a
\code{\link{node}} object gets returned with the elementary \code{rtable} objects.}
}
\description{
Summarize number of patients with abnormalities by grade (e.g. High, Low, Abnormal).
Denominator for each abnormal grade is defined as number of subjects with
non-missing grade (if specified, excluding subjects whose baseline grade is
the same as this abnormal grade); numerator is defined as number of subjects
with the specified abnormal grade (if specified, excluding subjects whose
baseline grade is the same as this abnormal grade).
}
\details{
Input data should include all post-baseline records (repeated and
unscheduled). Baseline and screening records should be excluded.
}
\examples{
library(dplyr)
library(random.cdisc.data)

# example 1
ANL1 <- tibble(
  USUBJID = c("ID1", "ID1", "ID2", "ID2", "ID3", "ID3"),
  ARM = factor(rep("ARM A", 6)),
  PARAMCD = factor(rep("X", 6), levels = c("X", "Y")),
  ANRIND = c("N", "H", "N", "N", "N", "H"),
  BNRIND = c("N", "N", "L", "L", "N", "N"),
)

ANL2 <- tibble(
  USUBJID = c("ID1", "ID1", "ID2", "ID2", "ID3", "ID3", "ID4", "ID5"),
  ARM = factor(rep("ARM A", 8)),
  PARAMCD = factor(rep("Y", 8), levels = c("X", "Y")),
  ANRIND = c("N", "L", "L", "N", "H", "L", "N", "H"),
  BNRIND = c("N", "N", "L", "L", "N", "N", "H", "")
)

ANL <- rbind(ANL1, ANL2) \%>\%
  var_relabel(
    USUBJID = "Subject ID",
    ARM = "Treatment Arm",
    PARAMCD = "Parameter Code",
    ANRIND = "Normal Range Indicator",
    BNRIND = "Baseline Indicator"
  )

t_abnormality(
  grade = sas_na(ANL$ANRIND),
  abnormal = c("L", "H"),
  baseline = sas_na(ANL$BNRIND),
  id = ANL$USUBJID,
  exclude_base_abn = TRUE,
  row_by = ANL$PARAMCD,
  col_by = ANL$ARM,
  col_N = 6,
  total = NULL,
  table_tree = FALSE
)

# example 2
ADSL <- radsl(cached = TRUE)
ADLB <- radlb(cached = TRUE) \%>\%
 dplyr::filter(ABLFL == "Y")

ADLB$ANRIND <- as.character(ADLB$ANRIND)
ADLB$ANRIND[c(1,10,500)] <- " "
ADLB$ANRIND <- ADLB$ANRIND \%>\% sas_na() \%>\% as.factor()

tbl2 <- t_abnormality(
  grade = ADLB$ANRIND,
  abnormal = c("LOW", "HIGH"),
  baseline = ADLB$BNRIND,
  id = ADLB$USUBJID,
  row_by = ADLB[, c("PARAM", "AVISIT")],
  col_by = by_all("All Patients"),
  col_N = nrow(ADSL),
  table_tree = FALSE
)

Viewer(tbl2)

}
