% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assertthat.R
\name{assertions}
\alias{assertions}
\alias{is_character_or_factor}
\alias{is_nonnegative_count}
\alias{is_variables}
\alias{is_df_with_variables}
\alias{is_equal_length}
\alias{is_proportion}
\alias{is_valid_factor}
\title{Additional Assertions for \code{assert_that}}
\usage{
is_character_or_factor(x)

is_nonnegative_count(x)

is_variables(x)

is_df_with_variables(df, variables)

is_equal_length(...)

is_proportion(x)

is_valid_factor(x)

is_proportion(x)
}
\arguments{
\item{x}{object to test}

\item{df}{supposed data frame to test}

\item{variables}{supposed variables list to test}

\item{...}{a collection of objects to test.}
}
\value{
\code{flag} whether the assertion holds (\code{TRUE} or \code{FALSE}). When used inside
\code{\link[assertthat:assert_that]{assertthat::assert_that()}} produces a meaningful error message.
}
\description{
We provide additional assertion functions which can be used together with \code{\link[assertthat:assert_that]{assertthat::assert_that()}}.
}
\section{Functions}{
\itemize{
\item \code{is_character_or_factor}: Check whether \code{x} is a character or factor vector.

\item \code{is_nonnegative_count}: Check whether \code{x} is a nonnegative count.

\item \code{is_variables}: Check whether \code{x} is a valid list of variable names.

\item \code{is_df_with_variables}: Check whether \code{df} is a data frame with the analysis \code{variables}.

\item \code{is_equal_length}: Check that objects provided are of same length.

\item \code{is_proportion}: Check whether \code{x} is a proportion: number between 0 and 1.

\item \code{is_valid_factor}: Check whether \code{x} is a valid factor (has levels and no empty string levels).

\item \code{is_proportion}: Check whether \code{x} is a proportion: number between 0 and 1.
}}

\examples{

# Check whether `x` is a character or factor vector.
is_character_or_factor(-1)
is_character_or_factor(c("a", "b"))
is_character_or_factor(factor(c("a", "b")))

# Check whether `x` is a nonnegative count.
is_nonnegative_count(-1)
is_nonnegative_count(0L)
is_nonnegative_count(10L)

# Check whether `x` is a valid list of variable names.
is_variables(list(val = "a"))
is_variables(list(1, 2))
is_variables(list("bla"))

# Check whether `df` contains the analysis `variables`.
is_df_with_variables(df = data.frame(a = 5, b = 3), variables = list(val = "a"))

#' # Check whether `x` is a valid list of variable names.
a <- 1
b <- NULL
c <- c(1, "car")
d <- 5
is_equal_length(a, b, c, d)


# Check whether `x` is between 0 and 1.
is_proportion(x = 0.3)
is_proportion(x = 1.3)

# Check whether `x` is a valid factor.
is_valid_factor(-1)
is_valid_factor(factor(c("a", "b")))
is_valid_factor(factor(c("a", "")))
is_valid_factor(factor())


# Check whether `x` is between 0 and 1.
is_proportion(x = 0.3)
is_proportion(x = 1)
}
