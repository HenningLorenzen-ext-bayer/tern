% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/g_forest.R
\name{g_forest}
\alias{g_forest}
\title{Create a Forest Plot based on a Table}
\usage{
g_forest(
  tbl,
  col_x,
  col_ci,
  vline = NULL,
  forest_header = NULL,
  xlim = NULL,
  logx = FALSE,
  x_at = NULL,
  width_row_names = NULL,
  width_columns = NULL,
  width_forest = unit(1, "null"),
  col_symbol_size = NULL,
  draw = TRUE,
  newpage = TRUE
)
}
\arguments{
\item{tbl}{(\code{rtable} object)}

\item{col_x}{(\code{integer} value)\cr
column index with estimator}

\item{col_ci}{(\code{integer} value)\cr
column index with confidence intervals}

\item{vline}{(\code{numeric} value)\cr
x coordinate for vertical line, if \code{NULL} then the line is
omitted}

\item{forest_header}{(\code{character(2)})\cr
text displayed to the left and right of \code{vline}, respectively.
If \code{vline = NULL} then \code{forest_header} needs to be \code{NULL} too}

\item{xlim}{(\code{numeric(2)})\cr
x limits for x-scales}

\item{logx}{(\code{logical} value)\cr
whether to show x-values on logarithm scale}

\item{x_at}{(\code{numeric} vector)\cr
Contains x tick locations, if \code{NULL} they get automatically chosen}

\item{width_row_names}{(\code{\link[grid]{unit}} object)\cr
Contains width for row names. If \code{NULL} the widths get automatically calculated.}

\item{width_columns}{(\code{\link[grid]{unit}} object)\cr
Contains widths for the table columns. If \code{NULL} the widths get automatically calculated.}

\item{width_forest}{(\code{\link[grid]{unit}} object)\cr
Contains width for the forest column. If \code{NULL} the widths get automatically calculated.}

\item{col_symbol_size}{(\code{integer} value)\cr
Column index from \code{tbl} containing data to be used to determine relative
size for estimator plot symbol. Typically, symbol size is proportional to the
sample size used to calculate the estimator. If \code{NULL}, the same symbol
size is used for all subgroups.}

\item{draw}{(\code{logical} value)\cr
Whether plot should be drawn}

\item{newpage}{(\code{logical} value)\cr
if \code{draw=TRUE} should plot be drawn on a new page}
}
\description{
Create a forest plot from any \code{\link[rtables]{rtable}} object that has a
column with a single value and a column with 2 values.
}
\examples{

g_forest()

\dontrun{
library(random.cdisc.data)
library(dplyr)

ADSL <- radsl(cached = TRUE)
ADTTE <- radtte(ADSL, cached = TRUE)
ADTTE_f <- ADTTE \%>\%
  dplyr::filter(PARAMCD == "OS" & ARMCD \%in\% c("ARM B", "ARM A")) \%>\%
  mutate(ARMCD = droplevels(ARMCD))
var_labels(ADTTE_f) <- var_labels(ADTTE)

tbl <- t_forest_tte(
  tte = ADTTE_f$AVAL,
  is_event = ADTTE_f$CNSR == 0,
  col_by = ADTTE_f$ARMCD,
  row_by_list = ADTTE_f[, c("SEX", "RACE")], # note factors required
  ties = "exact",
  dense_header = TRUE
)

# note plot requires a certain width
p <- g_forest(
  tbl = tbl,
  col_x = 8,
  col_ci = 9,
  vline = 1,
  forest_header = c("Treatement\nBetter", "Comparison\nBetter"),
  xlim = c(.1, 10),
  logx = TRUE,
  x_at = c(.1, 1, 10),
  col_symbol_size = 1, #draw symbol proportional to column 1 values
  draw = FALSE
)
grid.newpage()
grid.draw(p)


# For response table

ADSL <- radsl(cached = TRUE)
ADRS <- radrs(ADSL, cached = TRUE)

ADRS_f <- ADRS \%>\%
  dplyr::filter(PARAMCD == "OVRINV" & ARMCD \%in\% c("ARM A","ARM B")) \%>\%
  mutate(ARMCD = droplevels(ARMCD))
var_labels(ADRS_f) <- var_labels(ADRS)

\dontrun{
tbl <- t_forest_rsp(
  rsp = ADRS_f$AVALC \%in\% c("CR", "PR"),
  col_by = factor(ADRS_f$ARM),
  row_by_list = ADRS_f[, c("SEX", "RACE", "STRATA2", "BMRKR2")],
  strata_data = ADRS_f[ , c("STRATA1")]
)

tbl

p <- g_forest(
  tbl = tbl,
  col_x = 8,
  col_ci = 9,
  vline = 1,
  forest_header = c("Comparison\nBetter", "Treatement\nBetter"),
  xlim = c(.1, 10),
  logx = TRUE,
  x_at = c(.1, 1, 10),
  col_symbol_size = NULL,
  draw = FALSE
)
p <- decorate_grob(p, titles =  "forest plot", footnotes = footnotes(p))
grid.newpage()
grid.draw(p)


tbl2 <- t_forest_rsp(
  rsp = ADRS_f$AVALC \%in\% c("CR", "PR"),
  col_by = factor(ADRS_f$ARM),
  row_by_list = ADRS_f[, c("BMRKR2")],
  strata_data = ADRS_f[ , "STRATA1"]
)

tbl2

# stratified analysis noted in footnote
p <- g_forest(
  tbl = tbl2,
  col_x = 8,
  col_ci = 9,
  vline = 1,
  forest_header = c("Comparison\nBetter", "Treatement\nBetter"),
  xlim = c(.1, 10),
  logx = TRUE,
  x_at = c(.1, 1, 10),
  col_symbol_size = 1,
  draw = FALSE
)
p <- decorate_grob(p, titles =  "forest plot", footnotes = footnotes(p))
grid.newpage()
grid.draw(p)
}

# Works with any rtable

tbl <- rtable(
  header = c("E", "CI", "N"),
  rrow("", 1, c(.8, 1.2), 200),
  rrow("", 1.2, c(1.1, 1.4), 50)
)

g_forest(
  tbl = tbl,
  col_x = 1,
  col_ci = 2,
  col_symbol_size = 3
)

tbl <- rtable(
  header = rheader(
    rrow("", rcell("A", colspan = 2)),
    rrow("", "c1", "c2")
  ),
  rrow("row 1", 1, c(.8, 1.2)),
  rrow("row 2", 1.2, c(1.1, 1.4))
)

g_forest(
  tbl = tbl,
  col_x = 1,
  col_ci = 2,
  vline = 1,
  forest_header = c("Hello", "World")
)
}
}
\author{
Adrian Waddell (waddella) \email{adrian.waddell@roche.com}
}
