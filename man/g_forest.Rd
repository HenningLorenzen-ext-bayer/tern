% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/g_forest.R
\name{g_forest}
\alias{g_forest}
\title{Create a Forest Plot based on a Table}
\usage{
g_forest(tbl, col_x, col_ci, vline = NULL, forest_header = NULL,
  xlim = NULL, logx = FALSE, x_at = NULL, width_row_names = NULL,
  width_columns = NULL, width_forest = unit(1, "null"), draw = TRUE,
  newpage = TRUE)
}
\arguments{
\item{tbl}{an \code{rtable} object}

\item{col_x}{column index with estimator}

\item{col_ci}{column index with confidence intervals}

\item{vline}{x coordinate for vertical line, if \code{NULL} then the line is
omitted}

\item{forest_header}{character vector of length 2, displayed to the left and
right of \code{vline}, respectively. If \code{vline=NULL} then
\code{forest_header} needs to be \code{NULL} too}

\item{xlim}{x limits for x-scales}

\item{logx}{boolean for showing x-values on logarithm scale}

\item{x_at}{numeric vector with x tick locations, if \code{NULL} they get
automatically chosen}

\item{width_row_names}{\code{\link[grid]{unit}} object with width for row
names. If \code{NULL} the widths get automatically calculated.}

\item{width_columns}{\code{\link[grid]{unit}} object with widths for the
table columns. If \code{NULL} the widths get automatically calculated.}

\item{width_forest}{\code{\link[grid]{unit}} object with width for the forest
column. If \code{NULL} the widths get automatically calculated.}

\item{draw}{boolean, should plot be drawn}

\item{newpage}{boolean if \code{draw=TRUE} should plot be drawn on a new page}
}
\description{
Create a forest plot from any \code{\link[rtables]{rtable}} object that has a
column with a single value and a column with 2 values
}
\examples{
library(random.cdisc.data)
library(dplyr)

ADSL <- radsl(cached = TRUE)
ADTTE <- radtte(ADSL, chached = TRUE)

ADTTE_f <- ADTTE \%>\%
  dplyr::filter(PARAMCD == "OS" & ARMCD \%in\% c("ARM B", "ARM A")) \%>\%
  mutate(ARMCD = droplevels(ARMCD))

tbl <- t_forest_tte(
  tte = ADTTE_f$AVAL,
  is_event = ADTTE_f$CNSR == 0,
  col_by = ADTTE_f$ARMCD,
  row_by_list = droplevels(ADTTE_f[, c("SEX", "RACE")]), # note factors required
  ties = "exact",
  dense_header = TRUE
)

# note plot requires a certain width
g_forest(
  tbl = tbl,
  col_x = 8,
  col_ci = 9,
  vline = 1,
  forest_header = c("Treatement\\nBetter", "Comparison\\nBetter"),
  xlim = c(.1, 10),
  logx = TRUE,
  x_at = c(.1, 1, 10)
)

# For response table

ADSL <- radsl(cached = TRUE)
ADRS <- cadrs(ADSL, cached = TRUE)

ADRS_f <- ADRS \%>\%
  dplyr::filter(PARAMCD == "OVRINV" & ARMCD \%in\% c("ARM A","ARM B")) \%>\%
  mutate(ARMCD = droplevels(ARMCD))

tbl <- t_forest_rsp(
  rsp = ADRS_f$AVALC \%in\% c("CR", "PR"),
  col_by = factor(ADRS_f$ARM),
  row_by_list = ADRS_f[, c("SEX", "RACE")]
)

tbl

g_forest(
  tbl = tbl,
  col_x = 8,
  col_ci = 9,
  vline = 1,
  forest_header = c("Comparison\\nBetter", "Treatement\\nBetter"),
  xlim = c(.1, 10),
  logx = TRUE,
  x_at = c(.1, 1, 10)
)

# Works with any rtable

tbl <- rtable(
  header = c("E", "CI"),
  rrow("", 1, c(.8, 1.2)),
  rrow("", 1.2, c(1.1, 1.4))
)

g_forest(
  tbl = tbl,
  col_x = 1,
  col_ci = 2
)

tbl <- rtable(
  header = rheader(
    rrow("", rcell("A", colspan = 2)),
    rrow("", "c1", "c2")
  ),
  rrow("row 1", 1, c(.8, 1.2)),
  rrow("row 2", 1.2, c(1.1, 1.4))
)

g_forest(
  tbl = tbl,
  col_x = 1,
  col_ci = 2,
  vline = 1,
  forest_header = c("Hello", "World")
)
}
\seealso{
\code{\link{t_forest_tte}}, \code{\link{t_forest_rsp}}
}
\author{
Adrian Waddell (waddella) \email{adrian.waddell@roche.com}
}
