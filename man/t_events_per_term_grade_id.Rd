% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/t_events_term_grade_id.R
\name{t_events_per_term_grade_id}
\alias{t_events_per_term_grade_id}
\title{Events by Highest Grade Table}
\usage{
t_events_per_term_grade_id(
  terms,
  id,
  grade,
  col_by,
  col_N = NULL,
  total = NULL,
  grade_levels = NULL,
  event_type = "event",
  any_grade = "Any Grade",
  table_tree = FALSE
)
}
\arguments{
\item{terms}{character or factor vector, or dataframe to represent events information;
Currently \code{terms} can only be a vector or dataframe with 1 or 2 columns.
For \code{terms} with 2 columns, 1st column should represent higher level term and 2nd
column should be lower level term.}

\item{id}{vector of subject identifier. Length of \code{id} must be the same as the
length or number of rows of \code{terms}.}

\item{grade}{grade of adverse event.
For factors, it is assumed that intensity corresponds to the order of the factor levels.
If that is not the case, see \code{grade_levels}.
For character or numeric, \code{grade_levels} is required.}

\item{col_by}{logical factor or data.frame with reference and comparison group information, the
first \code{level} indicates the reference group. See the functions \code{factor_to_matrix_by}
and \code{add_total_by}.}

\item{col_N}{numeric vector with information of the number of patients in the
levels of \code{col_by}. This is useful if there are patients that have no
adverse events can be accounted for with this argument.}

\item{total}{string of column name of an added total column using \code{\link[rtables]{by_add_total}} to
\code{col_by} and \code{\link{col_N_add_total}} to \code{col_N}. If \code{NULL} no total column is added.}

\item{grade_levels}{a factor. The levels of the factor define the severity of the grade and
the order of display.
For example, \code{factor(c("c", "b", "a"), levels = c("a", "b", "c"))} will display
the most severe grade "c" at the bottom of the table, the least severe grade "a" at the top.
If \code{grade} is a factor, \code{grade_levels} will overwrite the level orders in \code{grade}.
If set to \code{NULL} (default), it is assumed that intensity corresponds to the order of
the factor levels of \code{grade}.
If \code{grade} is not a factor, \code{grade_levels} is required.}

\item{event_type}{string to specify the type of event that is summarized, \code{event} by default.
Only displayed when \code{terms} has 2 columns.}

\item{any_grade}{string to specify the row name which counts any occurrence,
it is named \code{Any Grade} by default}

\item{table_tree}{logical, if \code{FALSE} then a single \code{rtable} gets returned, if \code{TRUE} a
\code{\link{node}} object gets returned with the elementary \code{rtable} objects.}
}
\value{
an \code{\link{rtable}} object.
}
\description{
This function summarizes number of unique subjects by highest grade and events term(s).
Events \code{terms} can be one level term or two level terms (one higher level and one lower level).
An implementation example is to apply \code{t_events_per_term_grade_id} on Adverse Event Data
to create Adverse Events by Highest \code{NCI CTCAE} grade table
(\code{AET04}, \href{http://bioportal.roche.com/stream_doc/2_05/um/report_outputs_aet04.html}{STREAM2.x},
\href{https://rochewiki.roche.com/confluence/pages/viewpage.action?pageId=294027501}{STREAM1.17}).
}
\details{
\code{t_events_per_term_grade_id} includes percentages based on the total number of subjects
in the column heading (i.e. \code{"N=nnn"}). \code{col_N} can be explicitly specified to
get N for percentage calculation from either events dataset or additional dataset like
subject level dataset. See the example.

Multiple events within a subject of the same term (if \code{terms} is one level) or lower level term
(if \code{terms} is two levels) are counted once using the
 greatest intensity reported.

\code{t_events_per_term_grade_id} doesn't deal with data with missing grade. Impute or filter missing
values with \code{sas_na} and \code{explicit_na} before using \code{t_events_per_term_grade_id}.

\code{t_events_per_term_grade_id} orders data by "All Patients" column from the most commonly
 reported higher level term to the least frequent one. Within each group of higher level term,
 it sorts by decreasing frequency of lower level term. It brakes ties using \code{terms} names in alphabetical order.

\code{t_events_per_term_grade_id} fills in \code{col_by} and \code{grade} with \code{0} value
in case there was no events reported for particular \code{col_by} and/or
\code{grade} category. Use \code{grade_levels} to modify the range of desired
grades.
}
\examples{
library(dplyr)
library(random.cdisc.data)

ADSL <- radsl(cached = TRUE)
ADAE <- radae(ADSL, 4L, seed = 2)

t_events_per_term_grade_id(
  terms = ADAE$AEDECOD,
  id = ADAE$USUBJID,
  grade = ADAE$AETOXGR,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  grade_levels = as.factor(1:5)
)

# Introducing imperfect data and demo how to preprocess
ADAE$AEDECOD <- as.character(ADAE$AEDECOD)
ADAE$AEBODSYS <- as.character(ADAE$AEBODSYS)
ADAE$AEDECOD[c(1,5)] = ""
ADAE$AEBODSYS[c(2,6)] = " "

ADAE <- ADAE \%>\%
  mutate(
   grade_category = case_when(
     AETOXGR \%in\% c(1,2) ~ "Mild",
     AETOXGR \%in\% c(3,4) ~ "Moderate",
     AETOXGR \%in\% c(5) ~ "Severe"
   ),
   grade_category = factor(grade_category, levels=c("Mild", "Moderate", "Severe")),
   # Preprocess imperfect data
   AEDECOD = AEDECOD \%>\% sas_na \%>\% explicit_na(label = "Not Coded"),
   AEBODSYS = AEBODSYS \%>\% sas_na \%>\% explicit_na(label = "Not Coded"),
  ) \%>\%
  var_relabel(
    AEBODSYS = "MedDRA System Organ Class",
    AEDECOD = "MedDRA Preferred Term",
    AETOXGR = "Analysis Toxicity Grade",
    grade_category = "Insensity")


t_events_per_term_grade_id(
  terms = ADAE$AEDECOD,
  id = ADAE$USUBJID,
  grade = ADAE$AETOXGR,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  total = "All Patients",
  grade_levels = as.factor(1:5)
)

t_events_per_term_grade_id(
  terms = ADAE$AEDECOD,
  id = ADAE$USUBJID,
  grade = ADAE$grade_category,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  total = "All Patients",
  grade_levels = unique(sort(ADAE$grade_category))
)

t_events_per_term_grade_id(
  terms = ADAE \%>\% select(AEBODSYS, AEDECOD),
  id = ADAE$USUBJID,
  grade = ADAE$AETOXGR,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  grade_levels = as.factor(1:5),
  event_type = "adverse events"
)

tbls <- t_events_per_term_grade_id(
  terms = ADAE \%>\% select(AEBODSYS, AEDECOD),
  id = ADAE$USUBJID,
  grade = ADAE$grade_category,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  total = "All Patients",
  event_type = "adverse events",
  any_grade = "Any Severity",
  grade_levels = factor(c("Severe", "Moderate", "Mild"), levels = c("Severe", "Moderate", "Mild")),
  table_tree = TRUE
)
summary(tbls)
to_rtable(tbls)
}
\seealso{
\code{\link{t_max_grade_per_id}}, \code{\link{t_events_per_term_id}}
}
