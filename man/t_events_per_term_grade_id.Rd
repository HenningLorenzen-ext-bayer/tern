% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/t_events_term_grade_id.R
\name{t_events_per_term_grade_id}
\alias{t_events_per_term_grade_id}
\title{Events by Highest Grade Table}
\usage{
t_events_per_term_grade_id(
  terms,
  id,
  grade,
  col_by,
  col_N = NULL,
  total = NULL,
  event_type = "event",
  any_grade = "Any Grade",
  prune_zero_rows = TRUE,
  table_tree = FALSE
)
}
\arguments{
\item{terms}{(\code{character} or \code{factor} vector, or \code{data.frame})\cr
Represents events information.
Multi-level nesting is possible when \code{terms} is a \code{data.frame} and columns should
be ordered with the first column specifying the highest level term and the last column the
lowest level term.}

\item{id}{(vector)\cr
contains subject identifier. Length of \code{id} must be the same as the
length or number of rows of \code{terms}.}

\item{grade}{(vector)\cr
contains grade of adverse event.
For factors, it is assumed that intensity corresponds to the order of
the factor levels, from lowest to worst level.
If that is not the case, you have to preprocess using \code{levels(grade) <- new_levels}
beforehand.
The resulting table is then  ordered in the same fashion. To instead display
it in descending maximum grade order, you need to apply some postprocessing.}

\item{col_by}{(\code{logical}, \code{factor} or \code{data.frame})\cr
Contains reference and comparison group information, the
first \code{level} indicates the reference group. See the functions
\code{\link[rtables]{col_by_to_matrix}} and \code{\link[rtables]{by_add_total}}.}

\item{col_N}{numeric vector with information of the number of patients in the
levels of \code{col_by}. This is useful if there are patients that have no
adverse events can be accounted for with this argument.}

\item{total}{(\code{character} value)\cr
Denotes column name of an added total column using \code{\link[rtables]{by_add_total}} to
\code{col_by} and \code{\link{col_N_add_total}} to \code{col_N}. If \code{NULL} no total column is added.}

\item{event_type}{(\code{character} value) to specify the type of event that is summarized, \code{event} by default.
Only displayed when \code{terms} has 2 columns.}

\item{any_grade}{string to specify the row name which counts any occurrence,
it is named \code{Any Grade} by default}

\item{prune_zero_rows}{\code{logical} whether to prune all zero rows}

\item{table_tree}{(\code{logical} value)\cr
If \code{FALSE} then a single \code{rtable} gets returned, if \code{TRUE} a
\code{\link{node}} object gets returned with the elementary \code{rtable} objects.}
}
\value{
an \code{\link{rtable}} object.
}
\description{
This function summarizes number of unique subjects by highest grade and events term(s).
Events \code{terms} can be one level term or two level terms (one higher level and one lower level).
An implementation example is to apply \code{t_events_per_term_grade_id} on Adverse Event Data
to create Adverse Events by Highest \code{NCI CTCAE} grade table
(\code{AET04}, \href{http://bioportal.roche.com/stream_doc/2_05/um/report_outputs_aet04.html}{STREAM2.x},
\href{https://rochewiki.roche.com/confluence/pages/viewpage.action?pageId=294027501}{STREAM1.17}).
}
\details{
\code{t_events_per_term_grade_id} includes percentages based on the total number of subjects
in the column heading (i.e. \code{"N=nnn"}). \code{col_N} can be explicitly specified to
get N for percentage calculation from either events dataset or additional dataset like
subject level dataset. See the example.

Multiple occurrences of the same event in an individual \code{id} are counted only once when counting
number of subjects.

\code{t_events_per_term_grade_id} doesn't deal with data with missing grade. Impute or filter missing
values with \code{sas_na} and \code{explicit_na} before using \code{t_events_per_term_grade_id}.

\code{t_events_per_term_grade_id} orders data by overall frequency across all columns from the most commonly
reported higher level term to the least frequent one. Within each group of higher level term,
it sorts by decreasing frequency of lower level term. It brakes ties using \code{terms} names in
alphabetical order.

\code{t_events_per_term_grade_id} fills in \code{col_by} and \code{grade} with \code{0} value
in case there was no events reported for particular \code{col_by} and/or
\code{grade} category.
}
\examples{
library(dplyr)
library(random.cdisc.data)

ADSL <- radsl(cached = TRUE)
ADAE <- radae(ADSL, 4L, seed = 2)

t_events_per_term_grade_id(
  terms = ADAE$AEDECOD,
  id = ADAE$USUBJID,
  grade = ADAE$AETOXGR,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM)
)

# don't prune zero rows
t_events_per_term_grade_id(
  terms = ADAE$AEDECOD,
  id = ADAE$USUBJID,
  grade = ADAE$AETOXGR,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  prune_zero_rows = FALSE
)

# Introducing imperfect data and demo how to preprocess
ADAE$AEDECOD <- as.character(ADAE$AEDECOD)
ADAE$AEBODSYS <- as.character(ADAE$AEBODSYS)
ADAE$AEDECOD[c(1,5)] = ""
ADAE$AEBODSYS[c(2,6)] = " "

ADAE <- ADAE \%>\%
  mutate(
   grade_category = case_when(
     AETOXGR \%in\% c(1,2) ~ "Mild",
     AETOXGR \%in\% c(3,4) ~ "Moderate",
     AETOXGR \%in\% c(5) ~ "Severe"
   ),
   grade_category = factor(grade_category, levels=c("Mild", "Moderate", "Severe")),
   # Preprocess imperfect data
   AEDECOD = AEDECOD \%>\% sas_na \%>\% explicit_na(label = "Not Coded"),
   AEBODSYS = AEBODSYS \%>\% sas_na \%>\% explicit_na(label = "Not Coded"),
  ) \%>\%
  var_relabel(
    AEBODSYS = "MedDRA System Organ Class",
    AEDECOD = "MedDRA Preferred Term",
    AETOXGR = "Analysis Toxicity Grade",
    grade_category = "Insensity")


t_events_per_term_grade_id(
  terms = ADAE$AEDECOD,
  id = ADAE$USUBJID,
  grade = ADAE$AETOXGR,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  total = "All Patients"
)

t_events_per_term_grade_id(
  terms = ADAE$AEDECOD,
  id = ADAE$USUBJID,
  grade = ADAE$grade_category,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  total = "All Patients"
)

t_events_per_term_grade_id(
  terms = ADAE \%>\% select(AEBODSYS, AEDECOD),
  id = ADAE$USUBJID,
  grade = ADAE$AETOXGR,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  event_type = "adverse events"
)

levels(ADAE$grade_category) <- c("Severe", "Moderate", "Mild")
tbls <- t_events_per_term_grade_id(
  terms = ADAE \%>\% select(AEBODSYS, AEDECOD),
  id = ADAE$USUBJID,
  grade = ADAE$grade_category,
  col_by = ADAE$ARM,
  col_N = table(ADSL$ARM),
  total = "All Patients",
  event_type = "adverse events",
  any_grade = "Any Severity",
  table_tree = TRUE
)
summary(tbls)
to_rtable(tbls)
}
\seealso{
\code{\link{t_max_grade_per_id}}, \code{\link{t_events_per_term_id}}
}
