% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarize_variables.R
\name{summarize_variables}
\alias{summarize_variables}
\alias{s_summary}
\alias{s_summary.numeric}
\alias{s_summary.factor}
\alias{s_summary.character}
\alias{s_summary.logical}
\alias{a_summary}
\alias{a_summary.numeric}
\alias{a_summary.factor}
\alias{a_summary.character}
\alias{a_summary.logical}
\alias{create_afun_summary}
\alias{summarize_vars}
\title{Summarize Variables}
\usage{
s_summary(x, na.rm = TRUE, denom, .N_row, .N_col, .var, ...)

\method{s_summary}{numeric}(x, na.rm = TRUE, conf_level = 0.95, ...)

\method{s_summary}{factor}(
  x,
  na.rm = TRUE,
  denom = c("n", "N_row", "N_col"),
  .N_row,
  .N_col,
  ...
)

\method{s_summary}{character}(
  x,
  na.rm = TRUE,
  denom = c("n", "N_row", "N_col"),
  .N_row,
  .N_col,
  .var,
  ...
)

\method{s_summary}{logical}(
  x,
  na.rm = TRUE,
  denom = c("n", "N_row", "N_col"),
  .N_row,
  .N_col,
  ...
)

a_summary(x, ..., .N_row, .N_col, .var)

\method{a_summary}{numeric}(x, na.rm = TRUE, conf_level = 0.95, ...)

\method{a_summary}{factor}(
  x,
  na.rm = TRUE,
  denom = c("n", "N_row", "N_col"),
  .N_row,
  .N_col,
  ...
)

\method{a_summary}{character}(
  x,
  na.rm = TRUE,
  denom = c("n", "N_row", "N_col"),
  .N_row,
  .N_col,
  .var,
  ...
)

\method{a_summary}{logical}(
  x,
  na.rm = TRUE,
  denom = c("n", "N_row", "N_col"),
  .N_row,
  .N_col,
  ...
)

create_afun_summary(.stats, .formats, .labels, .indent_mods)

summarize_vars(
  lyt,
  vars,
  var_labels = vars,
  nested = TRUE,
  ...,
  show_labels = "default",
  .stats = c("n", "mean_sd", "median", "range", "count_fraction"),
  .formats = NULL,
  .labels = NULL,
  .indent_mods = NULL
)
}
\arguments{
\item{x}{(\code{numeric})\cr vector of numbers we want to analyze.}

\item{na.rm}{(\code{flag})\cr whether \code{NA} values should be removed from \code{x} prior to analysis.}

\item{denom}{(\code{string})\cr choice of denominator for proportion:\cr
can be \code{n} (number of values in this row and column intersection), \code{N_row} (total
number of values in this row across columns), or \code{N_col} (total number of values in
this column across rows).}

\item{.N_row}{(\code{count})\cr column-wise N (column count) for the full column that is passed by \code{rtables}.}

\item{.N_col}{(\code{count})\cr row-wise N (row group count) for the group of observations being analyzed
(i.e. with no column-based subsetting) that is passed by \code{rtables}.}

\item{.var}{(\code{string})\cr single variable name that is passed by \code{rtables} when requested
by a statistics function.}

\item{...}{arguments passed to \code{s_summary()}.}

\item{conf_level}{(\code{proportion})\cr confidence level of the interval.}

\item{.stats}{(\code{character})\cr statistics to select for the table.}

\item{.formats}{(named \code{character} or \code{list})\cr formats for the statistics.}

\item{.labels}{(named \code{character})\cr labels for the statistics (without indent).}

\item{.indent_mods}{(named \code{integer})\cr indent modifiers for the labels.}

\item{lyt}{(\code{layout})\cr input layout where analyses will be added to.}

\item{vars}{(\code{character})\cr variable names for the primary analysis variable to be iterated over.}

\item{var_labels}{character for label.}

\item{nested}{boolean, Add this as a new top-level split  (defining a new subtable directly under root). Defaults to \code{FALSE}}

\item{show_labels}{label visibility: one of "default", "visible" and "hidden".}
}
\value{
If \code{x} is of class \code{numeric}, returns a list with named items:
\itemize{
\item \code{n}: the \code{\link[=length]{length()}} of \code{x}.
\item \code{mean_sd}: the \code{\link[=mean]{mean()}} and \code{\link[=sd]{sd()}}.
\item \code{median}: the \code{\link[=median]{median()}}.
\item \code{mean_ci}: the CI for the mean (from \code{\link[=stat_mean_ci]{stat_mean_ci()}}).
\item \code{median_ci}: the CI for the median (from \code{\link[=stat_median_ci]{stat_median_ci()}}).
\item \code{range}: the \code{\link[=range]{range()}}.
}

If \code{x} is of class \code{factor} or converted from \code{character}, returns a list with
named items:
\itemize{
\item \code{n}: the \code{\link[=length]{length()}} of \code{x}.
\item \code{count}: a list with the number of cases for each level of the
factor \code{x}
\item \code{count_fraction}: similar to \code{count} but also includes the proportion of cases for each level of the
factor \code{x} relative to the denominator, or \code{NA} if the denominator is zero.
}

If \code{x} is of class \code{logical}, returns a list with named items:
\itemize{
\item \code{n}: the \code{\link[=length]{length()}} of \code{x} (possibly after removing \code{NA}s).
\item \code{count}: count of \code{TRUE} in \code{x}.
\item \code{count_fraction}: count and proportion of \code{TRUE} in \code{x} relative to the denominator,
or \code{NA} if the denominator is zero. Note that \code{NA}s in \code{x} are never counted or leading
to \code{NA} here.
}
}
\description{
We use the new S3 generic function \code{\link[=s_summary]{s_summary()}} to implement summaries for
different \code{x} objects. This is used as Statistics Function in combination
with the new Analyze Function \code{\link[=summarize_vars]{summarize_vars()}}.
}
\section{Functions}{
\itemize{
\item \code{s_summary}: \code{s_summary} is a S3 generic function to produce
an object description.

\item \code{s_summary.numeric}: Method for numeric class. Note that,
if \code{x} is an empty vector, \code{NA} is returned. This is the expected
feature so as to return \code{rcell} content in \code{rtables} when the
intersection of a column and a row delimits an empty data selection.
Also, when the \code{mean} function is applied to an empty vector, \code{NA} will
be returned instead of \code{NaN}, the latter being standard behavior in R.

\item \code{s_summary.factor}: Method for factor class. Note that,
if \code{x} is an empty factor, then still a list is returned for \code{counts} with one element
per factor level. If there are no levels in \code{x}, the function fails.

\item \code{s_summary.character}: Method for character class. This makes an automatic
conversion to factor (with a warning) and then forwards to the method for factors.

\item \code{s_summary.logical}: Method for logical class.

\item \code{a_summary}: S3 generic Formatted Analysis function to produce
an object description. It is used as \code{afun} in \code{\link[rtables:analyze]{rtables::analyze()}}.

\item \code{a_summary.numeric}: Formatted Analysis function method for \code{numeric}.

\item \code{a_summary.factor}: Method for \code{factor}.

\item \code{a_summary.character}: Formatted Analysis function method for \code{character}.

\item \code{a_summary.logical}: Formatted Analysis function method for \code{logical}.

\item \code{create_afun_summary}: Constructor function which creates a combined Formatted
Analysis function for use in layout creating functions \code{\link[=summarize_vars]{summarize_vars()}} and
\code{\link[=summarize_colvars]{summarize_colvars()}}.

\item \code{summarize_vars}: Analyze Function to add a descriptive analyze
layer to \code{rtables} pipelines. The analysis is applied to a vector and
return the summary, in \code{rcells}. The ellipsis (\code{...}) conveys arguments to
\code{\link[=s_summary]{s_summary()}}, for instance \code{na.rm = FALSE} if missing data should be
accounted for.
}}

\note{
Automatic conversion of character to factor does not guarantee that the table
can be generated correctly. In particular for sparse tables this very likely can fail.
It is therefore better to always preprocess the dataset such that factors are manually
created from character variables before passing the dataset to \code{\link[rtables:build_table]{rtables::build_table()}}.

Since \code{\link[=a_summary]{a_summary()}} is generic and we want customization of the formatting arguments
via \code{\link[rtables:make_afun]{rtables::make_afun()}}, we need to create another temporary generic function, with
corresponding customized methods. Then in order for the methods to be found,
we need to wrap them in a combined \code{afun}. Since this is required by two layout creating
functions (and possibly others in the future), we provide a constructor that does this:
\code{\link[=create_afun_summary]{create_afun_summary()}}.
}
\section{Formatting arguments}{

These additional formatting arguments can be passed to the layout creating function:
\describe{
\item{.stats}{(\code{character})\cr names of the statistics to use}
\item{.indent_mods}{(\code{integer})\cr named vector of indent modifiers for the labels}
\item{.formats}{(\code{character} or \code{list})\cr named vector of formats for the statistics}
\item{.labels}{(\code{character})\cr named vector of labels for the statistics (without indent)}
}
}

\examples{
# `s_summary.numeric`

## Basic usage: empty numeric returns NA-filled items.
s_summary(numeric())

## Management of NA values.
x <- c(NA_real_, 1)
s_summary(x, na.rm = TRUE)
s_summary(x, na.rm = FALSE)

x <- c(NA_real_, 1, 2)
s_summary(x)

## Benefits in `rtables` contructions:
require(rtables)
dta_test <- data.frame(
  Group = rep(LETTERS[1:3], each = 2),
  sub_group = rep(letters[1:2], each = 3),
  x = 1:6
)

## The summary obtained in with `rtables`:
split_cols_by(lyt = NULL, var = "Group") \%>\%
  split_rows_by(var = "sub_group") \%>\%
  analyze(vars = "x", afun = s_summary) \%>\%
  build_table(df = dta_test)

## By comparison with `lapply`:
X <- split(dta_test, f = with(dta_test, interaction(Group, sub_group)))
lapply(X, function(x) s_summary(x$x))

# `s_summary.factor`

## Basic usage:
s_summary(factor(c("a", "a", "b", "c", "a")))
# Empty factor returns NA-filled items.
s_summary(factor(levels = c("a", "b", "c")))

## Management of NA values.
x <- factor(c(NA, "Female"))
s_summary(x, na.rm = TRUE)
s_summary(x, na.rm = FALSE)

## Different denominators.
x <- factor(c("a", "a", "b", "c", "a"))
s_summary(x, denom = "N_row", .N_row = 10L)
s_summary(x, denom = "N_col", .N_col = 20L)

# `s_summary.character`

## Basic usage:
s_summary(c("a", "a", "b", "c", "a"), .var = "x")

# `s_summary.logical`

## Basic usage:
s_summary(c(TRUE, FALSE, TRUE, TRUE))

## Management of NA values.
x <- c(NA, TRUE, FALSE)
s_summary(x, na.rm = TRUE)
s_summary(x, na.rm = FALSE)

## Different denominators.
x <- c(TRUE, FALSE, TRUE, TRUE)
s_summary(x, denom = "N_row", .N_row = 10L)
s_summary(x, denom = "N_col", .N_col = 20L)

# `a_summary.numeric`
a_summary(rnorm(10))

# `a_summary.factor`
a_summary(factor(c("a", "a", "b", "c", "a")), .N_row = 10, .N_col = 10)

# `a_summary.character`
a_summary(c("A", "B", "A", "C"), .var = "x", .N_col = 10, .N_row = 10)

# `a_summary.logical`
a_summary(c(TRUE, FALSE, FALSE, TRUE, TRUE), .N_row = 10, .N_col = 10)

# `create_afun_summary()` to create combined `afun`

afun <- create_afun_summary(
  .stats = NULL,
  .formats = c(median = "xx."),
  .labels = c(median = "My median"),
  .indent_mods = c(median = 1L)
)
## Fabricated dataset.
dta_test <- data.frame(
  USUBJID = rep(1:6, each = 3),
  PARAMCD = rep("lab", 6*3),
  AVISIT  = rep(paste0("V", 1:3), 6),
  ARM     = rep(LETTERS[1:3], rep(6, 3)),
  AVAL    = c(9:1, rep(NA, 9))
)

l <- split_cols_by(lyt = NULL, var = "ARM") \%>\%
  split_rows_by(var = "AVISIT") \%>\%
  analyze(vars = "AVAL", afun = afun)

build_table(l, df = dta_test)


# `summarize_vars()` in rtables pipelines

## Default output within a `rtables` pipeline.
l <- split_cols_by(lyt = NULL, var = "ARM") \%>\%
  split_rows_by(var = "AVISIT") \%>\%
  summarize_vars(vars = "AVAL")

build_table(l, df = dta_test)

## Select and format statistics output.
l <- split_cols_by(lyt = NULL, var = "ARM") \%>\%
  split_rows_by(var = "AVISIT") \%>\%
  summarize_vars(
    vars = "AVAL",
    .stats = c("n", "mean_sd"),
    .formats = c("mean_sd" = "xx.x, xx.x"),
    .labels = c(n = "n", mean_sd = "Mean, SD")
  )

results <- build_table(l, df = dta_test)
as_html(results)

## Use arguments interpreted by `s_summary`.
l <- split_cols_by(lyt = NULL, var = "ARM") \%>\%
  split_rows_by(var = "AVISIT") \%>\%
  summarize_vars(vars = "AVAL", na.rm = FALSE)

results <- build_table(l, df = dta_test)
Viewer(results)

}
