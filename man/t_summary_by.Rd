% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/t_summary_variants.R
\name{t_summary_by}
\alias{t_summary_by}
\title{Summarize an Object for Different Groups with by Variable}
\usage{
t_summary_by(
  x,
  row_by,
  col_by,
  col_N = NULL,
  total = NULL,
  ...,
  table_tree = FALSE
)
}
\arguments{
\item{x}{vector or \code{data.frame}}

\item{row_by}{(\code{factor} or \code{data.frame})\cr
Defines how data from \code{x} is split into sub-tables. Dimensions must match
dimensions of \code{x} and no missing values are allowed. Multi-level nesting is possible when
\code{row_by} is a \code{data.frame}. Columns should be ordered with the first column specifying
the first variable to split by and the last column the specifying the last variable to split by.}

\item{col_by}{(\code{logical}, \code{factor} or \code{data.frame})\cr
Contains reference and comparison group information, the
first \code{level} indicates the reference group. See the functions
\code{\link[rtables]{col_by_to_matrix}} and \code{\link[rtables]{by_add_total}}.}

\item{col_N}{(\code{integer} vector)\cr
Contains the reference population per level of \code{col_by}. This by default is often
set to \code{get_N(col_by)}. Names of the list are ignored, they are added in the order they appear.
The default may not appropriate and should be modified by the user when \code{col_by} contains
more than one record per subject.}

\item{total}{(\code{character} value)\cr
Denotes column name of an added total column using \code{\link[rtables]{by_add_total}} to
\code{col_by} and \code{\link{col_N_add_total}} to \code{col_N}. If \code{NULL} no total column is added.}

\item{...}{arguments passed on to methods}

\item{table_tree}{(\code{logical} value)\cr
If \code{FALSE} then a single \code{rtable} gets returned, if \code{TRUE} a
\code{\link{node}} object gets returned with the elementary \code{rtable} objects.}
}
\description{
This is a wrapper around the basic \code{t_summary} functions with the difference that it has a row_by
argument.
}
\details{
For every unique combination of levels of \code{row_by} a summary table using
\code{\link{t_summary}} will be created. The individual tables are then stacked together.
}
\examples{
library(dplyr)
library(random.cdisc.data)

ADSL <- radsl(cached = TRUE)

t_summary_by(
 x = ADSL$SEX,
 row_by = ADSL$COUNTRY,
 col_by = ADSL$ARMCD,
 total = "All Patients",
 denominator = "N",
 drop_levels = TRUE
)

ADSL$SEX[1:5] <- NA

t_summary_by(
 x = ADSL$SEX,
 row_by = ADSL$COUNTRY,
 col_by = ADSL$ARMCD,
 total = "All Patients",
 denominator = "N",
 drop_levels = TRUE,
 useNA = "ifany"
)

ADQS <- radqs(cached = TRUE)
ADQS_f <- ADQS \%>\%
  dplyr::filter(PARAMCD=="BFIALL")

t_summary_by(
 x = ADQS_f$AVAL,
 row_by = ADQS_f$AVISIT,
 col_by = by_all("All"),
 col_N = nrow(ADSL),
)

ADQS_f$AVALCAT1 <- factor(ifelse(ADQS_f$AVAL >= 50, "Positive", "Negative"),
  levels = c("Positive", "Negative"))
ADQS_f <- var_relabel(ADQS_f, AVALCAT1 = "Result" )

t_summary_by(
 x = ADQS_f$AVALCAT1,
 row_by = ADQS_f$AVISIT,
 col_by = ADQS_f$ARMCD,
 total = "All Patients",
 col_N = table(ADSL$ARMCD),
)

ADSL <- radsl(cached = TRUE)
ADLB <- radlb(cached = TRUE)

# Recursive case
t_summary_by(
  x = ADLB$AVAL,
  row_by = ADLB[, c("PARAM", "AVISIT")],
  col_by = ADLB$ARM,
  col_N = table(ADSL$ARM),
  total = "All Patients"
)


# Table Tree
ADSL <- radsl(cached = TRUE)

tbls <- t_summary_by(
 x = ADSL$SEX,
 row_by = ADSL$COUNTRY,
 col_by = ADSL$ARMCD,
 total = "All Patients",
 table_tree = TRUE
)
summary(tbls)
to_rtable(tbls)

# Other examples
ADQS <- radqs(cached = TRUE) \%>\%
  mutate(PARAM = as.factor(PARAM)) \%>\%
  var_relabel(
    PARAM = "Questionnaire Parameter",
    AVISIT = "Visit"
  )

# we suppress warnings because some are NaN (change CHG at screening visit)
suppressWarnings(t_summary_by(
  x = ADQS[,c("AVAL", "CHG")],
  row_by = ADQS[, c("PARAM", "AVISIT")],
  col_by = ADQS$ARMCD,
  col_N = table(ADSL$ARMCD),
  total = "All Patients"
))

ADQS_f <- ADQS \%>\%
  dplyr::filter(PARAMCD == "BFIALL") \%>\%
  dplyr::mutate(
    AVALCAT1 = factor(
      ifelse(AVAL >= 50, "Positive", "Negative"),
      levels = c("Positive", "Negative")
    )
  ) \%>\%
  var_relabel(
    AVALCAT1 = "Result",
    AVISIT = "Visit"
  )

t_summary_by(
  x = ADQS_f \%>\% select(c("AVALCAT1", "AVAL")),
  row_by = ADQS_f$AVISIT,
  col_by = ADQS_f$ARMCD,
  col_N = table(ADSL$ARMCD),
  total = "All Patients"
)

# imitate behavior of t_summarize_by_visit by adding function compare_in_header
ADSL <- radsl(cached = TRUE)
ADVS <- radvs(cached = TRUE) \%>\%
 dplyr::filter(PARAMCD=="DIABP")

t_summary_by(
  x = compare_in_header(ADVS[c("AVAL", "CHG")]),
  row_by = ADVS$AVISIT,
  col_by = ADVS$ARM,
  col_N = table(ADSL$ARM),
  f_numeric = patient_numeric_fcns()
)
}
\seealso{
\code{\link{t_summary}}, \code{\link{t_summary.data.frame}},
  \code{\link{t_summary.numeric}}, \code{\link{t_summary.factor}},
  \code{\link{t_summary.logical}}, \code{\link{t_summary.Date}},
  \code{\link{t_summary.character}}
}
\author{
Jana Stoilova (stoilovs) \email{jana.stoilova@roche.com}
}
