% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/t_coxreg.R
\name{t_cox_univariate}
\alias{t_cox_univariate}
\title{Cox regression including a single covariate - tabulated results}
\usage{
t_cox_univariate(
  formula,
  data,
  covariates = NULL,
  interactions = FALSE,
  conf_level = 0.95,
  pval_method = c("wald", "likelihood"),
  increments = NULL,
  ...
)
}
\arguments{
\item{formula}{(\code{formula}) \cr
Specifies \code{\link[survival:Surv]{survival model}}.
The arm variable needs to be wrapped in \code{\link{arm}}. The
\code{\link[survival]{strata}} special will only be used for the stratified analysis. If there is not
\code{\link[survival]{strata}} specification then the stratified analysis is omitted.}

\item{data}{A \code{data.frame} which includes the variable in formula and covariate}

\item{covariates}{a list of single right-hand-term formulas, if named, named will be used in the output}

\item{interactions}{The interaction term should be included, default is \code{FALSE}.}

\item{conf_level}{The level of confidence for the hazard ration interval estimations. Default is 0.95.}

\item{pval_method}{The method used for estimation of p.values, should be one of \code{"wald"} (default) or
\code{"likelihood"}.}

\item{increments}{If a quantitative variable is included, it is possible to provide the expected level of estimation
for the interaction. Should then be list, item are vector specifying levels, the item are named after the
covariate name as it appears in covariate formula.}

\item{...}{parameters passed down to \code{\link[survival:coxph]{coxph()}}
\itemize{
\item \code{ties} a character string specifying the method for tie handling, one of \code{exact} (default), \code{efron}, \code{breslow}.
}}
}
\description{
Fit cox (proportional hazard) regression models including the treatment and a single covariate.
Starting from a univariate model (e.g. survival model including an two-level arm predictor), a list of candidate
alternative models including an additional covariate (optionally including the interaction terms) is tested.
}
\examples{
\dontrun{
library(tern)
library(random.cdisc.data)
ADTTE   <- radtte(cached = TRUE) # nolint
ADTTE_f <- subset(ADTTE, PARAMCD == "OS")   # _f: filtered # nolint
ADTTE_f <- within( # nolint
  data = subset(
    ADTTE_f,
    PARAMCD == "OS"
    & ARMCD \%in\% c("ARM A", "ARM B")
    & SEX \%in\% c("F", "M")
    & RACE \%in\% c("ASIAN", "BLACK OR AFRICAN AMERICAN", "WHITE")
  ),
  expr = { # nolint start
    set.seed(1)
    ARMCD <- droplevels(ARMCD)
    ARMCD <- relevel(ARMCD, "ARM B")
    SEX <- droplevels(SEX)
    RACE <- droplevels(RACE)
    X <- rnorm(n = length(ARM))
  }  # nolint end
)

## Standard output - no interactions - comparison -----------------------------
t_cox_univariate(
  formula = Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD),
  data = ADTTE_f,
  covariates = list(~ SEX, "Race" = ~ RACE, Age = ~ AGE, ~ X),
  interactions = FALSE
)

# For comparison
mod10 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD), data = ADTTE_f)
mod11 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) + SEX, data = ADTTE_f)
mod12 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) + AGE, data = ADTTE_f)
mod13 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) + RACE, data = ADTTE_f)

car::Anova(mod10,  test.statistic = "Wald", type = 'III')
car::Anova(mod11, test.statistic = "Wald", type = 'III')
car::Anova(mod12, test.statistic = "Wald", type = 'III')
car::Anova(mod13, test.statistic = "Wald", type = 'III')

summary(mod13)$coefficients

## Standard output - no interactions - but strata -----------------------------
t_cox_univariate(
  formula = Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) + strata(SEX),
  data = ADTTE_f,
  covariates = list("Race" = ~ RACE, Age = ~ AGE, ~ X),
  interactions = FALSE
)

# For comparison
mod20 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) + strata(SEX), data = ADTTE_f)
mod21 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) + strata(SEX) + AGE, data = ADTTE_f)
mod22 <- coxph(
  Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) + strata(SEX) + RACE,
  data = ADTTE_f
)

car::Anova(mod20, test.statistic = "Wald", type = 'III')
car::Anova(mod21, test.statistic = "Wald", type = 'III')
car::Anova(mod22, test.statistic = "Wald", type = 'III')

summary(mod22)$coefficients

## Standard output - interactions ----------------------
t_cox_univariate(
  formula =  Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD),
  data = ADTTE_f,
  covariates = list(~ RACE, ~SEX, Age = ~ AGE, ~X),
  interactions = TRUE, conf_level = 0.8
)

# For comparison
mod30 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD), data = ADTTE_f)
mod31 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) * AGE, data = ADTTE_f)
mod32 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD) * RACE, data = ADTTE_f)

car::Anova(mod30, test.statistic = "Wald", type = 'III')
car::Anova(mod31, test.statistic = "Wald", type = 'III')
car::Anova(mod32, test.statistic = "Wald", type = 'III')

## Standard output - interactions ----------------------
t_cox_univariate(
  formula =  Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD),
  data = ADTTE_f,
  covariates = list(~ RACE, ~SEX, Age = ~ AGE, ~X),
  interactions = TRUE, conf_level = 0.8
)

## Standard output - interactions + increments -----------------
t_cox_univariate(
  formula =  Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD),
  data = ADTTE_f,
  covariates = list(~ RACE, ~SEX, Age = ~ AGE, ~X),
  interactions = TRUE, conf_level = 0.8,
  increments = list(AGE = c(50), X = c(-0.5, 0, 0.5, 1))
)

## Other example, other data
library(dplyr)
library(random.cdisc.data)
ADSL <- radsl(cached = TRUE)
ADSL <- ADSL \%>\% dplyr::filter(SEX \%in\% c("F", "M"))

ADTTE <- radtte(ADSL, seed = 2) \%>\%
  dplyr::filter(PARAMCD == "PFS" & ARMCD != "ARM C")
ADTTE$ARMCD <- droplevels(ADTTE$ARMCD)
ADTTE$SEX <- droplevels(ADTTE$SEX)
t_cox_univariate(
  formula = Surv(time = AVAL, event = 1 - CNSR) ~ arm(ARMCD),
  data = ADTTE,
  covariates  = list(~ SEX, ~ BMRKR2, Age =~AGE),
  interactions = TRUE,
  increments = list(AGE = mean(ADTTE$AGE)),
  conf_level = 0.975)

# check HRs
m2 <- coxph(Surv(time = AVAL, event = 1 - CNSR) ~ ARMCD*BMRKR2, data = ADTTE)
coef(m2)
}
}
