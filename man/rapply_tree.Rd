% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aa_trees.R
\docType{methods}
\name{rapply_tree}
\alias{rapply_tree}
\alias{rapply_tree,node-method}
\title{Applies the function f to each node in the tree x}
\usage{
rapply_tree(x, f, ...)

\S4method{rapply_tree}{node}(x, f, target_obj_class = NULL,
  path = character(0), ...)
}
\arguments{
\item{x}{tree object}

\item{f}{function to apply to each node in the tree recursively,
f(name, content, path, ...) -> list(name = new_name, content = new_content)
path includes node itself}

\item{...}{additional arguments to pass to f}

\item{target_obj_class}{target obj class of each node with arguments (name, content, children),
same as original node if \code{NULL}}

\item{path}{path to node in tree}
}
\description{
Applies the function f to each node in the tree x

f is applied to the content of each node and a new node of class 'target_obj_class' is created
with children applied recursively
depth-first fashion
}
\examples{
n2 <- node(name = "D", content = c(1:3), children = list(
  node(name = "A", content = array(c(1:6), dim = c(2,3)), children = list()),
  node(name = "B", content = array(c(1:6), dim = c(2,3)), children = list()),
  node(name = "C", content = array(c(1:6), dim = c(2,3)), children = list())
))
summary(n2)
# change class of elements so we can see it in summary()
summary(rapply_tree(n2, f = function(name, content, path, ...) {
  new_content <- if (is(content, "integer")) {
    paste("integer", content, collapse = ":")
  } else if (is(content, "matrix")) {
    paste("matrix", content, collapse = ":")
  } else {
    "unknown"
  }
  list(name = name, content = new_content)
}))

}
