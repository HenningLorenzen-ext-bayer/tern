% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abnormal.R
\name{abnormal}
\alias{abnormal}
\alias{count_abnormal}
\alias{s_count_abnormal}
\alias{analyze_abnormal}
\title{Patient Counts with Abnormal Range Values}
\usage{
count_abnormal(
  df,
  .var,
  abnormal,
  variables = list(id = "USUBJID", visit = "AVISIT"),
  baseline = "BASELINE"
)

s_count_abnormal(df, .var, abnormal, ...)

analyze_abnormal(lyt, vars, ...)
}
\arguments{
\item{df}{(\verb{data frame})\cr data set containing all analysis variables.}

\item{.var}{(\code{string})\cr single variable name that is passed by \code{rtables} when requested
by a statistics function.}

\item{abnormal}{string identifying the abnormal range level(s) in \code{vars}}

\item{variables}{(named \code{list} of \code{strings})\cr list of additional analysis variables.}

\item{baseline}{string identifying the baseline level(s) in \code{visit}}

\item{...}{additional arguments for the lower level functions.}

\item{lyt}{(\code{layout})\cr input layout where analyses will be added to.}

\item{vars}{(\code{character})\cr variable names for the primary analysis variable to be iterated over.}
}
\description{
Primary analysis variable is the \code{range} factor, and additional analysis variables are
\code{id} (character or factor), \code{visit} (factor).
We count patients in the numerator and denominator as follows:
\describe{
\item{\code{num}}{the number of patients without this abnormality at baseline and with
this abnormality recorded while on treatment.}
\item{\code{denom}}{the number of patients without this abnormality at baseline and at least one
post-baseline assessment.}
}
Here the baseline visit is identified as the \code{visit} level(s) in \code{baseline}.
Note that the denominators include patients that might have other abnormal levels
at baseline, and patients with missing baseline.
}
\section{Functions}{
\itemize{
\item \code{count_abnormal}: Produce a vector with \code{num} and \code{denom} counts of patients for a single \code{abnormal}
level.

\item \code{s_count_abnormal}: Statistics function which counts patients with abnormal range values
for multiple \code{abnormal} levels, and returns a list with one element each.

\item \code{analyze_abnormal}: Layout creating function which can be used for creating tables, which can take
statistics function arguments and additional format arguments (see below).
}}

\section{Formatting arguments}{

These additional formatting arguments can be passed to the layout creating function:
\describe{
\item{.stats}{(\code{character})\cr names of the statistics to use}
\item{.indent_mods}{(\code{integer})\cr named vector of indent modifiers for the labels}
\item{.formats}{(\code{character} or \code{list})\cr named vector of formats for the statistics}
\item{.labels}{(\code{character})\cr named vector of labels for the statistics (without indent)}
}
}

\examples{
df <- data.frame(
  USUBJID = as.character(c(1, 1, 2, 2)),
  AVISIT = factor(c("BASELINE", "WEEK 1", "BASELINE", "WEEK 1")),
  ANRIND = factor(c("NORMAL", "LOW", "HIGH", "HIGH"))
)
# Just for one abnormal level.
count_abnormal(df, .var = "ANRIND", abnormal = "HIGH")

# Use the statistics function to count patients for multiple abnormal levels.
s_count_abnormal(df, .var = "ANRIND", abnormal = c(low = "LOW", high = "HIGH"))

# Layout creating function.
basic_table() \%>\%
  analyze_abnormal(vars = "ANRIND", abnormal = c(high = "HIGH")) \%>\%
  build_table(df)

# Passing of statistics function and formatting arguments.
df2 <- data.frame(
  ID = as.character(c(1, 1, 2, 2)),
  VISIT = factor(c("SCREENING", "WEEK 1", "SCREENING", "WEEK 1")),
  RANGE = factor(c("NORMAL", "LOW", "HIGH", "HIGH"))
)
basic_table() \%>\%
  analyze_abnormal(
    vars = "RANGE",
    abnormal = c(low = "LOW", high = "HIGH"),
    variables = list(id = "ID", visit = "VISIT"),
    baseline = "SCREENING",
    .labels = c(low = "< LLN"),
    .indent_mods = c(fraction = 1L)
  ) \%>\%
  build_table(df2)
}
