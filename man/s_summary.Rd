% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_summary.R
\name{s_summary}
\alias{s_summary}
\alias{s_summary.numeric}
\title{S3 generic for \code{s_summary}}
\usage{
s_summary(x, na.rm = TRUE)

\method{s_summary}{numeric}(x, na.rm = TRUE)
}
\arguments{
\item{x}{a vector.}

\item{na.rm}{(\code{logical})

Indicating whether \code{NA} values should be
stripped before the computation proceeds.}
}
\value{
If \code{x} is of class \code{numeric}, returns a list with named items:
\itemize{
\item \code{n}: the \code{\link[=length]{length()}} of \code{x}.
\item \code{mean_sd}: the \code{\link[=mean]{mean()}} and \code{\link[=sd]{sd()}}.
\item \code{median}: the \code{\link[=median]{median()}}.
\item \code{range}: the \code{\link[=range]{range()}}.
}
}
\description{
\code{s_summary} is a generic function to produce an object description.
}
\note{
\itemize{
\item If \code{x} is an empty vector, \code{NA} is returned. This is the expected
feature so as to return \code{rcell} content in \code{rtables} when the
intersection of a column and a row delimits an empty data selection.
\item Also, when the \code{mean} function is applied to an empty vector, \code{NA} will
be returned instead of \code{NaN}, the latter being standard behavior in R.
}
}
\examples{
# `s_summary.numeric`
# ===================

## Basic usage: empty numeric returns NA-filled items.
s_summary(numeric())

## Management of NA values.
x <- c(NA_real_, 1)
s_summary(x, na.rm = TRUE)
s_summary(x, na.rm = FALSE)

x <- c(NA_real_, 1, 2)
s_summary(x)

## Benefits in `rtables` contructions:
require(rtables)
dta_test <- data.frame(
  Group = rep(LETTERS[1:3], each = 2),
  sub_group = rep(letters[1:2], each = 3),
  x = 1:6
)

## The summary obtained in with `rtables`:
l <- split_cols_by(lyt = NULL, var = "Group") \%>\%
  split_rows_by(var = "sub_group") \%>\%
  analyze(vars = "x", afun = s_summary) \%>\%
  build_table(df = dta_test)

## By comparison with `lapply`:
X <- split(dta_test, f = with(dta_test, interaction(Group, sub_group)))
lapply(X, function(x) s_summary(x$x))
}
