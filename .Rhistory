col_by = factor(c("A", "A", "B", "C", "C")),
col_N = c(2, 4, 10)
)
t_events_per_term_id(
terms = with_label(factor(c("t1", "t1", "t2", "t2", "t2")), "Term"),
id = c(1, 4, 2, 3, 3),
col_by = factor(c("A", "A", "B", "C", "C")),
col_N = c(2, 4, 10),
total_events = NULL
)
t_events_per_term_id(
terms = with_label(factor(c("t1", "t1", "t2", "t2", "t2")), "Term"),
id = c(1, 4, 2, 3, 3),
col_by = factor(c("A", "A", "B", "C", "C")) %>% by_add_total("All Patients"),
col_N = col_N_add_total(c(2, 4, 10))
)
t_events_per_term_id(
terms = with_label(factor(c("t1", "t1", "t2", "t2", "t2")), "Term"),
id = c(1, 4, 2, 3, 3),
col_by = factor(c("A", "A", "B", "C", "C")),
col_N = c(2, 4, 10)
)
t_el_forest_rsp(
rsp = sample(c(TRUE, FALSE), 200, TRUE),
col_by = factor(sample(c("ARM A", "ARM B"), 200, TRUE), levels = c("ARM A", "ARM B"))
)
devtools::load_all(".")
tree <- rsplit_to_tree(1:5, list(factor(c("M", "M", "F", "F", "F")), factor(c("O", "Y", "Y", "Y", "Y"))))
summary(tree)
cat(displayable(tree))
by_lst <- list(factor(c(rep("clA", 4), rep("clB", 4))), factor(c(rep(c("A1", "A2"), 2), rep(c("B1", "B2"), 2))))
summary(rsplit_to_tree(1:8, by_lst))
summary(rsplit_to_tree(1:8, by_lst, drop_empty_levels = FALSE))
t_el_forest_rsp(
rsp = sample(c(TRUE, FALSE), 200, TRUE),
col_by = factor(sample(c("ARM A", "ARM B"), 200, TRUE), levels = c("ARM A", "ARM B"))
)
t_el_forest_rsp(
rsp = sample(c(TRUE, FALSE), 200, TRUE),
col_by = factor(sample(c("ARM A", "ARM B"), 200, TRUE), levels = c("ARM A", "ARM B"))
)
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
devtools::load_all(".")
t_el_forest_rsp(
rsp = sample(c(TRUE, FALSE), 200, TRUE),
col_by = factor(sample(c("ARM A", "ARM B"), 200, TRUE), levels = c("ARM A", "ARM B"))
)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
t_events_per_term_grade_id(
terms = as_factor_keep_attributes(ADAE$AEDECOD),
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
library(dplyr)
library(random.cdisc.data)
library(purrr)
ADSL <- radsl(10, seed = 1)
ADAE <- radae(ADSL, 4, seed = 2)
t_events_per_term_grade_id(
terms = as_factor_keep_attributes(ADAE$AEDECOD),
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
table_tree@content <- row_names_as_col(table_tree@content, "helloTest")
table_tree
row_names_as_col(tree@content, "helloTest")
nr_h
header(tbl)
row_names_as_col(tree@content, c("", "helloTest"))
row_names_as_col(tree@content, c("", "helloTest"))
rtables::cbind_rtables
rtables:::cbind_rtables
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
devtools::load_all(".")
library(dplyr)
library(random.cdisc.data)
library(purrr)
ADSL <- radsl(10, seed = 1)
ADAE <- radae(ADSL, 4, seed = 2)
t_events_per_term_grade_id(
terms = as_factor_keep_attributes(ADAE$AEDECOD),
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
row_names_as_col(tree@content, c("", "helloTest"))
grade_label <- label(grade) %||% deparse(substitute(grade))
row_names_as_col(tree@content, c("", grade_label))
devtools::load_all(".")
t_events_per_term_grade_id(
terms = as_factor_keep_attributes(ADAE$AEDECOD),
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
devtools::load_all(".")
library(random.cdisc.data)
ADSL <- cadsl
ADTTE <- cadtte
ADTTE_f <- subset(ADTTE, PARAMCD == "OS")
tbl <- t_tte(
formula = Surv(AVAL, !CNSR) ~ arm(ARM) + strata(SEX),
data = ADTTE_f,
event_descr = factor(EVNTDESC),
time_points = c(6, 2000),
time_unit = "month"
)
tbl
t_el_forest_rsp(
rsp = sample(c(TRUE, FALSE), 200, TRUE),
col_by = factor(sample(c("ARM A", "ARM B"), 200, TRUE), levels = c("ARM A", "ARM B"))
)
devtools::load_all(".")
library(random.cdisc.data)
library(dplyr)
ADSL <- radsl(seed = 1)
ADSL$'FAKE Name > -1.3 Flag' <- rep(c('Y', 'N'), 50)
ADRS <- radrs(ADSL, seed = 2)
ADRS_f <- subset(ADRS, PARAMCD == "BESRSPI") %>%
dplyr::filter(ARM != 'C: Combination') %>%
mutate(ARM = droplevels(ARM))
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
by = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
get_forest_by(by, length(rsp))
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
by = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
get_forest_by(by, length(rsp))
df
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
by = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
by
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
by = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
by = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
esplit(df, by)
by
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
by = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
lapply(rows_by_lst, function(rows_by) esplit(df, rows_by))
dfs
lapply(dfs, function(x) {
browser()
Map(function(x_level, level_name) {
t_el_forest_rsp(
rsp = x_level$rsp,
col_by = x_level$col_by,
row_name = level_name,
dense_header = dense_header
)
}, x, names(x))
})
Map(function(x_level, level_name) {
t_el_forest_rsp(
rsp = x_level$rsp,
col_by = x_level$col_by,
row_name = level_name,
dense_header = dense_header
)
}, x, names(x))
lapply(dfs, function(x) {
rbindl_rtables(Map(function(x_level, level_name) {
t_el_forest_rsp(
rsp = x_level$rsp,
col_by = x_level$col_by,
row_name = level_name,
dense_header = dense_header
)
}, x, names(x)))
})
tbls <- lapply(dfs, function(x) {
rbindl_rtables(Map(function(x_level, level_name) {
t_el_forest_rsp(
rsp = x_level$rsp,
col_by = x_level$col_by,
row_name = level_name,
dense_header = dense_header
)
}, x, names(x)))
})
tree <- invisible_node(lapply(tbls, function(node_name, tbl) node(name = node_name, content = tbl)))
lapply(tbls, function(node_name, tbl) node(name = node_name, content = tbl))
invisible_node(Map(
function(node_name, tbl) node(name = node_name, content = tbl),
names(tbls),
tbls
))
if (table_tree) {
tree
} else {
to_rtable(tree)
}
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM, # %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
tbl
?var_labels
var_labels
?rows_by_lst
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM, # %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")]
)
rows_by_lst
rows_by_lst[[1]]
rows_by_lst[[2]]
rows_by_lst[[3]]
is.factor(rows_by_lst[[3]])
is.factor(rows_by_lst[[2]])
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
do.call(check_same_n, c(list(rsp = rsp, col_by = col_by), rows_by_lst))
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
vapply(rows_by_lst, label, character(1))
label(rows_by_lst[[1]])
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
Map(`%||%`, lapply(rows_by_lst, label), names(rows_by_lst))
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
rows_by_lst
df <- list(rsp = rsp, col_by = col_by)
dfs <- lapply(rows_by_lst, function(rows_by) esplit(df, rows_by))
tbls <- lapply(dfs, function(x) {
rbindl_rtables(Map(function(x_level, level_name) {
t_el_forest_rsp(
rsp = x_level$rsp,
col_by = x_level$col_by,
row_name = level_name,
dense_header = dense_header
)
}, x, names(x)))
})
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM %>% by_add_total("ALL"),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
col_by
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% by_add_total("ALL")
)
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% by_add_total("ALL")
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% by_add_total("ALL")
)
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(by_add_total("ALL"))
)
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level)
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(by_add_total("ALL"))
debugonce(by_add_total)
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(by_add_total("ALL"))
col_by
debugonce(by_add_total)
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(by_add_total("ALL"))
col_by
label
as_factor_keep_attributes
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(by_add_total(label = "ALL"))
test111 <- function(x) {
browser()
}
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(test111)
x
by_add_total(x, label = "ALL")
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(by_add_total("ALL"))
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(function(x) by_add_total(x, "ALL"))
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level) %>% map(function(x) by_add_total(x, "ALL"))
)
tbl
ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
c(list(by_all(label = total, n = length(rsp))), rows_by_lst %>% map(na_as_level))
by_all
col_by_to_matrix(by_all(label = total), n = length(rsp))
col_by_to_matrix
by_add_total(label = total, n = length(rsp))
by_add_total(NULL, label = total, n = length(rsp))
list(by_add_total(NULL, label = total, n = length(rsp)))
c(
list(by_add_total(NULL, label = total, n = length(rsp))),
rows_by_lst %>% map(na_as_level)
)
names(rows_by_lst)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
rows_by_lst
names(rows_by_lst)
Map(`%||%`, lapply(rows_by_lst, label), names(rows_by_lst))
rows_by_lst
rows_by_lst[[1]]
label(rows_by_lst[[1]])
label(by_add_total(NULL, label = total, n = length(rsp)))
with_label(by_add_total(NULL, label = "all", n = length(rsp)), total)
label(with_label(by_add_total(NULL, label = "all", n = length(rsp)), total))
Map(`%||%`, lapply(rows_by_lst, label), names(rows_by_lst))
rows_by_lst <- c(
list(with_label(by_add_total(NULL, label = "all", n = length(rsp)), total)),
rows_by_lst %>% map(na_as_level)
)
class(by_add_total(NULL, label = total, n = length(rsp)))
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
rows_by_lst
names(rows_by_lst)
Map(`%||%`, lapply(rows_by_lst, label), names(rows_by_lst))
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
tbl
tbl
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
tbl
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
devtools::load_all(".")
library(random.cdisc.data)
ADSL <- cadsl
ADVS <- cadvs
tern:::t_summarize_by_visit(data = ADVS[c("AVAL")], visit = ADVS$AVISIT, col_by = ADVS$ARM,
id = ADVS$USUBJID, col_N = table(ADSL$ARM))
tern:::t_summarize_by_visit(data = ADVS[c("PCHG")], visit = ADVS$AVISIT, col_by = ADVS$ARM,
id = ADVS$USUBJID, col_N = table(ADSL$ARM))
tern:::t_summarize_by_visit(
data = ADVS[c("AVAL", "CHG")],
visit = ADVS$AVISIT,
col_by = ADVS$ARM,
id = ADVS$USUBJID,
col_N = table(ADSL$ARM)
)
library(random.cdisc.data)
library(dplyr)
ADSL <- cadsl
ADQS <- cadqs %>%
dplyr::filter(PARAMCD == "BFIALL")
tbl <- t_summarize_by_visit(
data = ADQS[c("AVAL", "CHG")],
visit = ADQS$AVISIT,
col_by = ADQS$ARM,
id = ADQS$USUBJID,
col_N = table(ADSL$ARM)
)
tbl
Viewer(tbl)
library(random.cdisc.data)
ADSL <- cadsl
ADTTE <- cadtte
ADTTE_f <- subset(ADTTE, PARAMCD == "OS")
tbl <- t_tte(
formula = Surv(AVAL, !CNSR) ~ arm(ARM) + strata(SEX),
data = ADTTE_f,
event_descr = factor(EVNTDESC),
time_points = c(6, 2000),
time_unit = "month"
)
tbl
devtools::document()
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
