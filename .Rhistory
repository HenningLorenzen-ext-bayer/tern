attr(x, "keys") <- "test"
expect_silent(cdisc_data(x, code = NULL, check = FALSE))
expect_silent(cdisc_data(x, arg1 = x, arg2 = x, code = NULL, check = FALSE))
})
test_that("Basic example - with code without check", {
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = FALSE))
expect_silent(cdisc_data(ASL = x, arg1 = x, arg2 = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = FALSE))
})
test_that("Basic example - with code and check", {
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = TRUE))
expect_silent(cdisc_data(ASL = x, arg1 = x, arg2 = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = TRUE))
})
test_that("Check is skipped if code is empty", {
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, check = TRUE))
expect_silent(cdisc_data(ASL = x, code = NULL, check = TRUE))
expect_silent(cdisc_data(ASL = x, code = "", check = TRUE))
})
test_that("Naming list elements", {
x <- 1
attr(x, "keys") <- "test"
expect_identical(names(cdisc_data(x)), "ASL")
expect_identical(names(cdisc_data(ASL = x, arg1 = x, arg2 = x)), c("ASL", "arg1", "arg2"))
})
test_that("List values", {
x <- 1
keys(x) <- "test"
result <- cdisc_data(x)
result_to_compare <- list(ASL = 1)
keys(result_to_compare[["ASL"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare, "code") <- "\n\n# code from function argument(s)\nASL <- x\n"
expect_identical(result, result_to_compare)
x1 <- 1
keys(x1) <- "test"
x2 <- 2
keys(x2) <- "test"
x3 <- 3
keys(x3) <- "test"
result <- cdisc_data(x1, arg2 = x2, arg3 = x3)
result_to_compare <- list(ASL = 1, arg2 = 2, arg3 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["arg2"]]) <- "test"
keys(result_to_compare[["arg3"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["arg2"]], "dataname") <- "arg2"
attr(result_to_compare[["arg3"]], "dataname") <- "arg3"
attr(result_to_compare, "code") <- "\n\n# code from function argument(s)\nASL <- x1\narg2 <- x2\narg3 <- x3\n"
expect_identical(result, result_to_compare)
})
test_that("Empty code", {
ASL <- 1
keys(ASL) <- "test"
# missing code
result <- cdisc_data(ASL, check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
# NULL code
result <- cdisc_data(ASL, code = NULL, check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
# empty code
result <- cdisc_data(ASL, code = "", check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
})
test_that("Arguments created by code", {
x <- 1
keys(x) <- "test"
result <- cdisc_data(x, code = "x <- 1; keys(x) <- 'test'", check = FALSE)
expect_silent(result)
result_to_compare <- list(ASL = 1)
keys(result_to_compare[["ASL"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare, "code") <- "x <- 1; keys(x) <- 'test'\n\n# code from function argument(s)\nASL <- x\n"
expect_identical(result, result_to_compare)
})
test_that("Error - ASL is missing", {
expect_error(cdisc_data(arg1 = 1, code = NULL, check = FALSE), "ASL and code arguments are missing")
expect_error(cdisc_data(code = "x <- 2", check = FALSE), "ASL is missing and cannot be generated by code")
})
test_that("Error - checking is forbidden if any argument is call", {
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
x <- 1
keys(x) <- "test"
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
expect_error(
cdisc_data(foo(1), code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
})
test_that("Error - not named arguments", {
x <- 1
expect_error(
cdisc_data(x, x, code = NULL, check = FALSE),
"All arguments passed to '...' should be named"
)
expect_error(
cdisc_data(y, y, code = "y <- 1", check = FALSE),
"All arguments passed to '...' should be named"
)
})
test_that("Error - no keys attribute", {
x <- 1
expect_error(
cdisc_data(x, code = NULL, check = FALSE),
"Cannot find 'keys' attribute"
)
x <- 1
keys(x) <- "test"
y <- 2
expect_error(
cdisc_data(x, arg1 = y, code = NULL, check = FALSE),
"Cannot find 'keys' attribute"
)
x <- 1
keys(x) <- "test"
z <- 3
expect_error(
cdisc_data(x, arg1 = z, code = "z <- 3", check = FALSE),
"Cannot find 'keys' attribute"
)
})
test_that("Error - keys do not match", {
x1 <- 1
keys(x1) <- "test1"
x2 <- 1
keys(x2) <- "test2"
code <- paste(
"x1 <- 1; keys(x1) <- 'test1';",
"x2 <- 1; keys(x2) <- 'test2';"
)
expect_error(
cdisc_data(x1, arg1 = x2, code = code, check = FALSE),
"Cannot find match of .* keys"
)
})
devtools::load_all()
devtools::load_all()
context("cdisc_data")
test_that("Basic example - without code and check", {
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(x, code = NULL, check = FALSE))
expect_silent(cdisc_data(x, arg1 = x, arg2 = x, code = NULL, check = FALSE))
})
test_that("Basic example - with code without check", {
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = FALSE))
expect_silent(cdisc_data(ASL = x, arg1 = x, arg2 = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = FALSE))
})
test_that("Basic example - with code and check", {
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = TRUE))
expect_silent(cdisc_data(ASL = x, arg1 = x, arg2 = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = TRUE))
})
test_that("Check is skipped if code is empty", {
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, check = TRUE))
expect_silent(cdisc_data(ASL = x, code = NULL, check = TRUE))
expect_silent(cdisc_data(ASL = x, code = "", check = TRUE))
})
test_that("Naming list elements", {
x <- 1
attr(x, "keys") <- "test"
expect_identical(names(cdisc_data(x)), "ASL")
expect_identical(names(cdisc_data(ASL = x, arg1 = x, arg2 = x)), c("ASL", "arg1", "arg2"))
})
test_that("List values", {
x <- 1
keys(x) <- "test"
result <- cdisc_data(x)
result_to_compare <- list(ASL = 1)
keys(result_to_compare[["ASL"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare, "code") <- "\n\n# code from function argument(s)\nASL <- x\n"
expect_identical(result, result_to_compare)
x1 <- 1
keys(x1) <- "test"
x2 <- 2
keys(x2) <- "test"
x3 <- 3
keys(x3) <- "test"
result <- cdisc_data(x1, arg2 = x2, arg3 = x3)
result_to_compare <- list(ASL = 1, arg2 = 2, arg3 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["arg2"]]) <- "test"
keys(result_to_compare[["arg3"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["arg2"]], "dataname") <- "arg2"
attr(result_to_compare[["arg3"]], "dataname") <- "arg3"
attr(result_to_compare, "code") <- "\n\n# code from function argument(s)\nASL <- x1\narg2 <- x2\narg3 <- x3\n"
expect_identical(result, result_to_compare)
})
test_that("Empty code", {
ASL <- 1
keys(ASL) <- "test"
# missing code
result <- cdisc_data(ASL, check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
# NULL code
result <- cdisc_data(ASL, code = NULL, check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
# empty code
result <- cdisc_data(ASL, code = "", check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
})
test_that("Arguments created by code", {
x <- 1
keys(x) <- "test"
result <- cdisc_data(x, code = "x <- 1; keys(x) <- 'test'", check = FALSE)
expect_silent(result)
result_to_compare <- list(ASL = 1)
keys(result_to_compare[["ASL"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare, "code") <- "x <- 1; keys(x) <- 'test'\n\n# code from function argument(s)\nASL <- x\n"
expect_identical(result, result_to_compare)
})
test_that("Error - ASL is missing", {
expect_error(cdisc_data(arg1 = 1, code = NULL, check = FALSE), "ASL and code arguments are missing")
expect_error(cdisc_data(code = "x <- 2", check = FALSE), "ASL is missing and cannot be generated by code")
})
test_that("Error - checking is forbidden if any argument is call", {
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
x <- 1
keys(x) <- "test"
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
expect_error(
cdisc_data(foo(1), code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
})
test_that("Error - not named arguments", {
x <- 1
expect_error(
cdisc_data(x, x, code = NULL, check = FALSE),
"All arguments passed to '...' should be named"
)
expect_error(
cdisc_data(y, y, code = "y <- 1", check = FALSE),
"All arguments passed to '...' should be named"
)
})
test_that("Error - no keys attribute", {
x <- 1
expect_error(
cdisc_data(x, code = NULL, check = FALSE),
"Cannot find 'keys' attribute"
)
x <- 1
keys(x) <- "test"
y <- 2
expect_error(
cdisc_data(x, arg1 = y, code = NULL, check = FALSE),
"Cannot find 'keys' attribute"
)
x <- 1
keys(x) <- "test"
z <- 3
expect_error(
cdisc_data(x, arg1 = z, code = "z <- 3", check = FALSE),
"Cannot find 'keys' attribute"
)
})
test_that("Error - keys do not match", {
x1 <- 1
keys(x1) <- "test1"
x2 <- 1
keys(x2) <- "test2"
code <- paste(
"x1 <- 1; keys(x1) <- 'test1';",
"x2 <- 1; keys(x2) <- 'test2';"
)
expect_error(
cdisc_data(x1, arg1 = x2, code = code, check = FALSE),
"Cannot find match of .* keys"
)
})
context("get_rcode")
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
#- Single chunk with one table construction
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
reference_string <- c(
"",
strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)"
)
expect_equal(
strsplit(get_rcode(title = "My title"), "\n")[[1]],
reference_string,
info = "Compare single expression chunk with get_rcode. no data."
)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
context("get_rcode")
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
rlang::expr(data.frame(x = y))
set_chunk
context("get_rcode")
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
test_that("get_rcode for chunks", {
#- Single chunk with one table construction
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
reference_string <- c(
"",
strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)"
)
expect_equal(
strsplit(get_rcode(title = "My title"), "\n")[[1]],
reference_string,
info = "Compare single expression chunk with get_rcode. no data."
)
#- Second chunk with replacement function call
expect_silent(
set_chunk("my_tbl", rlang::expr(summary(td)))
)
expect_error(
get_rcode(title = "My title", datasets = list(test_data), dataname = "td"),
"FilteredData",
info = "get_rcode shall just accept teal::FilteredData"
)
reference_string <- c(
"",
strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)",
"summary(td)"
)
expect_equal(
strsplit(get_rcode(title = "My title"), "\n")[[1]],
reference_string,
info = "Compare two expression with dataname replacement."
)
teal_data <- teal:::FilteredData$new(datanames = c("ASL"))
attr(test_data, "source") <- "data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))"
teal_data$set_data("ASL", test_data)
#- third chunk including teal data
set_chunk("ASL_one", rlang::expr(summary(dataset)))
expect_error(
get_rcode(),
"title",
info = "No title check."
)
session$userData$chunks <- NULL
expect_error(
get_rcode(chunks = "NULL"),
"chunks",
info = "No Code chunks error expected upon empty code chunks."
)
})
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
library(teal.devel)
roxygen2::roxygenise()
getwd()
setwd("../../..")
getwd()
setwd("teal.devel/")
roxygen2::roxygenise()
library(teal.devel)
context("get_rcode")
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
session
devtools::load_all()
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
set_chunk("tbl", rlang::expr(data.frame(x = y)),chunks = session)
set_chunk("tbl", rlang::expr(data.frame(x = y)), chunks = session$userData$chunks)
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
reference_string <- c(
"",
strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)"
)
expect_equal(
strsplit(get_rcode(title = "My title"), "\n")[[1]],
reference_string,
info = "Compare single expression chunk with get_rcode. no data."
)
get_rcode(title = "My title"), "\n")
get_rcode(title = "My title")
get_rcode(chunks = "NULL")
get_rcode_header(title = "My title")
get_rcode(title = "My title")
devtools::load_all()
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode_header(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode_header(title = "Teal App")
get_rcode_header(title = "Teal App") %>% cat
paste0("# ", head, "\n")
getwd()
shiny::runApp('tests/testthat/app_get_code')
devtools::load_all()
runApp('tests/testthat/app_get_code')
head
paste0("# ", head, "\n")
paste0("# ", head)
Q
Q
get_rcode_header(title = "Teal App")
devtools::load_all()
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
set_chunk("tbl", rlang::expr(data.frame(x = y)), chunks = session$userData$chunks)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)), chunks = session$userData$chunks)
)
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
devtools::load_all()
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
set_chunk("tbl", rlang::expr(data.frame(x = y)))
get_rcode(title = "My title")
get_rcode(title = "My title",chunks = session$userData$chunks)
roxygen2::roxygenise()
lintr:::addin_lint()
lintr:::addin_lint()
roxygen2::roxygenise()
test.nest::test_lintr()
library(teal.devel)
roxygen2::roxygenise()
test.nest::test_lintr()
