)
col_by
do.call(rbind, Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
data.frame(grade = c(), id = c(), col_by = c())
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
))
names(col_by)
aggregate(grade ~ id + col_by_factor, FUN = max, drop = TRUE, data = df, na.rm = TRUE)
devtools::load_all(".")
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM %>% by_add_total("All Patients"),
col_N = col_N_add_total(table(ADSL$ARM)),
grade_levels = 1:5
)
col_by_factor
col_by_to_factor(col_by)
devtools::load_all(".")
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
col_by_to_factor(col_by)
aggregate(grade ~ id + col_by_to_factor(col_by), FUN = max, drop = TRUE, data = df, na.rm = TRUE)
do.call(rbind, Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
data.frame(grade = c(), id = c(), col_by = c())
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
))
do.call(rbind, Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
data.frame(grade = c(), id = c(), col_by = c())
} else {
browser()
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
))
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE)
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
data.frame(grade = c(), id = c(), col_by = c())
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
)
data.frame(grade = c(), id = c(), col_by = c())
?data.frame
data.frame(list(grade = c(), id = c(), col_by = c()))
colnames(data.frame(nrow = 0, ncol = 3), c("grade", "id", "col_by")
colnames(data.frame(nrow = 0, ncol = 3), c("grade", "id", "col_by"))
data.frame(nrow = 0, ncol = 3)
colnames(data.frame(), c("grade", "id", "col_by"))
data.frame(grade = 1, id = 1, col_by = 1)[c(),]
do.call(rbind, Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
data.frame(grade = 1, id = 1, col_by = 1)[c(),]
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
))
do.call(rbind, Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
#data.frame(grade = 1, id = 1, col_by = 1)[c(),]
NULL
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
))
Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
#data.frame(grade = 1, id = 1, col_by = 1)[c(),]
NULL
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
)
rbind.data.frame()
rbind.data.frame
?rbind.data.frame
do.call(rbind, c(list(make.row.names = FALSE), Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
#data.frame(grade = 1, id = 1, col_by = 1)[c(),]
NULL
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
)))
do.call(rbind, unname(Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
#data.frame(grade = 1, id = 1, col_by = 1)[c(),]
NULL
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
)))
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
do.call(rbind, Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
data.frame(grade = c(), id = c(), col_by = c())
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
))
devtools::load_all(".")
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
do.call(rbind, unname(Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
# aggregate does not work when rows is all FALSE
NULL
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
)))
col_N
do.call(rbind, unname(Map(
function(rows, col_by_name) {
if (sum(rows) == 0) { # rows is logical
# aggregate does not work when rows is all FALSE
NULL
} else {
data.frame(
aggregate(grade ~ id, FUN = max, drop = TRUE, data = df[rows,], na.rm = TRUE),
col_by = col_by_name
)
}
},
col_by,
names(col_by)
)))
df_max_no_na
rtabulate(
x = df_max_no_na,
row_by = by_all(any_grade),
col_by = df_max_no_na$col_by,
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
rtabulate(
x = df_max_no_na,
row_by = by_all(any_grade),
col_by = as.factor(df_max_no_na$col_by),
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
as.factor(df_max_no_na$col_by)
df_max_no_na
as.factor(df_max_no_na$col_by)
rtabulate(
x = df_max_no_na,
row_by = by_all(any_grade),
col_by = as.factor(df_max_no_na$col_by),
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
col_by
is.data.frame(col_by)
col_wise_args
is.data.frame(col_by)
is.data.frame(as.factor(df_max_no_na$col_by))
col_by_to_matrix(as.factor(df_max_no_na$col_by))
df_max <- aggregate(grade ~ id + col_by_to_factor(col_by), FUN = max, drop = TRUE, data = df, na.rm = TRUE)
df_no_na <- na.omit(df)
df_no_na_id <- df_no_na[!duplicated(df_no_na$id), ]
rtabulate(
x = df_no_na_id,
row_by = no_by(any_grade),
col_by = df_no_na_id$col_by,
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
rtabulate(
x = df_no_na_id,
row_by = by_all(any_grade),
col_by = df_no_na_id$col_by,
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
devtools::load_all(".")
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
df_max <- aggregate(grade ~ id + col_by_to_factor(col_by), FUN = max, drop = TRUE, data = df, na.rm = TRUE)
df_no_na <- na.omit(df)
df_no_na_id <- df_no_na[!duplicated(df_no_na$id), ]
df_max
rtabulate(
x = df_no_na_id,
row_by = by_all(any_grade),
col_by = df_no_na_id$col_by,
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
df_no_na_id$col_by
col_by <- col_by_to_factor(col_by)
df_max <- aggregate(grade ~ id + col_by, FUN = max, drop = TRUE, data = df, na.rm = TRUE)
df_no_na <- na.omit(df)
df_no_na_id <- df_no_na[!duplicated(df_no_na$id), ]
rtabulate(
x = df_no_na_id,
row_by = by_all(any_grade),
col_by = df_no_na_id$col_by,
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
df_no_na_id$col_by
df_no_na_id
df_max <- aggregate(grade ~ id + col_by, FUN = max, drop = TRUE, data = df, na.rm = TRUE)
df_max
df_no_na <- na.omit(df)
df_no_na_id <- df_no_na[!duplicated(df_no_na$id), ]
df_no_na_id
df_no_na <- na.omit(df_max)
df_no_na_id <- df_no_na[!duplicated(df_no_na$id), ]
df_no_na_id$col_by
rtabulate(
x = df_no_na_id,
row_by = by_all(any_grade),
col_by = df_no_na_id$col_by,
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
df_no_na_id
df_no_na_id$col_by
factor(df_max$col_by, names(col_by))
df_max$col_by
names(col_by)
col_by <- by_factor_to_matrix(col_by)
df_max$col_by <- factor(df_max$col_by, names(col_by))
factor(df_max$col_by, names(col_by))
devtools::load_all(".")
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
df_max
rtabulate(
x = df_max_no_na,
row_by = by_all(any_grade),
col_by = as.factor(df_max_no_na$col_by),
FUN = count_perc_col_N,
format = "xx (xx.x%)",
col_wise_args = list(n_i = col_N)
)
devtools::load_all(".")
t_events_per_term_grade_id(
terms = as.factor(ADAE$AEDECOD), #todo: keep label
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
grade_levels = 1:5
)
#' \dontrun{
#' # throws an error because grade NA is not in grade_levels
#' t_max_grade_per_id(
#'   grade =  c(1,2,NA),
#'   id = c(1,2,3),
#'   col_by = factor(LETTERS[1:3]),
#'   col_N = c(15, 10, 12)
#' )
#' }
#'
check_id <- function(id, col_by) {
browser()
col_by <- col_by_to_matrix(col_by)
# remove total column if present
col_by <- col_by[, vapply(col_by, all, logical(1))]
cbind(data.frame(id = id), count = rowSums(col_by)) %>% group_by("id")
}
check_id(id = ADAE$USUBJID, col_by = ADAE$ARM)
col_by
vapply(col_by, all, logical(1))
col_by <- col_by[, !vapply(col_by, all, logical(1))]
col_by
rowSums(col_by)
cbind(data.frame(id = id), count = rowSums(col_by))
col_by
data.frame(id = id, col_by)
ADAE
ADAE$USUBJID
data.frame(id = id, col_by) %>% group_by("id")
data.frame(id = id, col_by) %>% group_by(id)
data.frame(id = id, col_by) %>% group_by(id) %>% sum()
data.frame(id = id, col_by) %>% group_by(.data$id)
data.frame(id = id, col_by) %>% group_by(.data$id) %>% colSums()
?summarise_all
?summarise
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise(colSums)
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum)
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(function(x) browser())
x
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise(function(x) browser())
?summarise
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise(valid = function(x) browser())
?do
data.frame(id = id, col_by) %>% group_by(.data$id) %>% do(function(x) browser())
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum)
#' \dontrun{
#' # throws an error because grade NA is not in grade_levels
#' t_max_grade_per_id(
#'   grade =  c(1,2,NA),
#'   id = c(1,2,3),
#'   col_by = factor(LETTERS[1:3]),
#'   col_N = c(15, 10, 12)
#' )
#' }
#'
check_id <- function(id, col_by) {
browser()
col_by <- col_by_to_matrix(col_by)
# remove total column if present
col_by <- col_by[, !vapply(col_by, all, logical(1))]
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum)
}
check_id(id = ADAE$USUBJID, col_by = ADAE$ARM)
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum)
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% rowSums(.)
specialRowSums <- function(x) {
browser()
}
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% specialRowSums(.)
x
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)
(data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)) > 0
rowSums((data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)) > 0)
rowSums((data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)) > 0) == 1
source('~/tern/R/t_events_term_grade_id.R', echo=TRUE)
#' \dontrun{
#' # throws an error because grade NA is not in grade_levels
#' t_max_grade_per_id(
#'   grade =  c(1,2,NA),
#'   id = c(1,2,3),
#'   col_by = factor(LETTERS[1:3]),
#'   col_N = c(15, 10, 12)
#' )
#' }
#'
check_id <- function(id, col_by) {
col_by <- col_by_to_matrix(col_by)
# remove total column if present
col_by <- col_by[, !vapply(col_by, all, logical(1))]
all(rowSums((data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)) > 0) == 1)
}
check_id(id = ADAE$USUBJID, col_by = ADAE$ARM)
#' checks that each patient appears only in one col_by column (possibly
#' several times as AVAL corresponds to several measures and there are >= 1 rows per patient)
check_id <- function(id, col_by) {
col_by <- col_by_to_matrix(col_by)
# remove total column if present
col_by <- col_by[, !vapply(col_by, all, logical(1))]
# for each id, count number of appearances in each column of col_by, then check
# that each id appears in exactly one column of col_by (possibly several times)
all_patients_in_one_col_by <- all(rowSums((
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)
) > 0) == 1)
if (!all_patients_in_one_col_by) {
stop("Patient appears in multiple col_by columns/ARMs (excluding total column)")
}
}
check_id(id = ADAE$USUBJID, col_by = ADAE$ARM)
devtools::load_all(".")
t_max_grade_per_id(
grade =  c(1,2,3),
id = c(1,1,1),
col_by = factor(rep("A", 3)),
col_N = 3
)
(
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)
) > 0)
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)
id
col_by
