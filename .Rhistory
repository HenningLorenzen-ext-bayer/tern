)
)
adte_extracted <- data_extract_spec(
dataname = "ADTE",
filter = adte_filters,
columns = columns_spec(
choices = c("AVAL", "BMRKR1"),
selected = c("AVAL"),
multiple = FALSE,
fixed = FALSE, # Whether the user can select the item
label = "" # Label the column select dropdown (optional)
)
)
asl_extracted <- data_extract_spec(
dataname = "ASL",
columns = columns_spec(
choices = c("SEX", "AGE"),
selected = c("AGE"),
multiple = TRUE,
fixed = FALSE
)
)
get_code("inst/app.R")
cdisc_data(ASL = asl,
ADTE = adte,
code = get_code("inst/app.R"),
check = TRUE)
runApp('inst')
runApp('inst')
library(teal.devel)
runApp('inst')
get_rcode_data_extract(
dataname = merged_dataname,
data_to_merge = merged_datasets
)
get_rcode_data_extract(
dataname = merged_dataname,
data_to_merge = merged_datasets
)
get_rcode_data_extract(
dataname = merged_dataname,
data_to_merge = merged_datasets
)
get_rcode_data_extract(
dataname = merged_dataname,
data_to_merge = merged_datasets
)
get_rcode_data_extract(
dataname = merged_dataname,
data_to_merge = merged_datasets
)
str_merge <- get_rcode_data_extract(
dataname = merged_dataname,
data_to_merge = merged_datasets
)
str_merge %>% cat
merged_dataname
merged_datasets
get_rcode_header(...)
get_rcode_header(...)
get_rcode_header(...) %>% car
get_rcode_header(...) %>% cat
datasets$get_data(dataname[[1]]) %>% attr("source")
str_preproc <- datasets$get_data(dataname[[1]]) %>% attr("source")
str_filter <- teal.devel::get_filter_txt(dataname, datasets)
datasets
!is.null(datasets)
!is.null(dataname)
str_preproc <- datasets$get_data(dataname[[1]]) %>% attr("source")
str_filter <- teal.devel::get_filter_txt(dataname, datasets)
class(datasets)
str_header
str_header <- get_rcode_header(...)
str_preproc <- datasets$get_data(dataname[[1]]) %>% attr("source")
str_filter <- teal.devel::get_filter_txt(dataname, datasets)
if (str_filter != "") {
str_filter <- paste0(str_filter, "\n\n")
}
str_header <- get_rcode_header(...)
str_preproc <- datasets$get_data(dataname[[1]]) %>% attr("source")
str_filter <- teal.devel::get_filter_txt(dataname, datasets)
str_filter
str_filter <- paste0(str_filter, "\n\n")
str_header
str_preproc
str_filter
str_merge
chunks$get_rcode(unfiltered_datasets = merged_dataname)
merged_dataname
merged_dataname
chunks
chunks$get_rcode(unfiltered_datasets = merged_dataname)
chunks$get_rcode_id(unfiltered_datasets = merged_dataname)
$get_rcode_id(unfiltered_datasets = merged_dataname)
chunks$get_rcode_id(unfiltered_datasets = merged_dataname)
selected_chunk_ids
selected_chunk_ids
roxygen2::roxygenise()
runApp('inst')
selected_chunk_ids
chunks
#' Scatterplot and Regression Model
#'
#' @import teal.devel
#'
#' @param dataname name of datasets used to generate the regression plot (just used for labeling)
#' @param regressor (\code{\link{teal.devel}{DataExtractSpec}}) Output of \code{teal.devel::data_extract_spec}
#'  to define the regressor variable from an incoming dataset with filtering and selecting.
#' @param response (\code{\link{teal.devel}{DataExtractSpec}}) Output of \code{teal.devel::data_extract_spec}
#'  to define the response variable from an incoming dataset with filtering and selecting.
#' @param plot_height (\code{numeric}) a vector of length three with \code{c(value, min and max)} for a slider
#'  encoding the plot height.
#'
#' @export
#' @inheritParams teal::module
#' @inheritParams teal::standard_layout
#'
#' @examples
#'
#' library(random.cdisc.data)
#' asl <- radsl(N = 600)
#'
#' adte <- radtte(asl, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
#'
#' adte_filters <- filter_spec(
#'   vars = c("PARAMCD"), #'  only key variables are allowed
#'   sep = " - ",
#'   choices = c("OS", "PFS", "EFS"),
#'   selected = "OS",
#'   multiple = TRUE, #'  if multiple, then a spread is needed
#'   label = "Choose endpoint"
#' )
#'
#'
#' adte_extracted_regressor <- data_extract_spec(
#'   dataname = "ADTE",
#'   filter = adte_filters,
#'   columns = columns_spec(
#'     choices = c("AVAL", "BMRKR1", "SITEID"),
#'     selected = c("AVAL"),
#'     multiple = TRUE,
#'     fixed = FALSE, #'  Whether the user can select the item (optional)
#'     label = "Column" #'  Label the column select dropdown (optional)
#'   )
#' )
#'
#' adte_extracted_response <- data_extract_spec(
#'   dataname = "ADTE",
#'   filter = adte_filters,
#'   columns = columns_spec(
#'     choices = c("AVAL", "BMRKR1"),
#'     selected = c("AVAL"),
#'     multiple = FALSE,
#'     fixed = FALSE, #'  Whether the user can select the item
#'     label = "" #'  Label the column select dropdown (optional)
#'   )
#' )
#'
#' asl_extracted <- data_extract_spec(
#'   dataname = "ASL",
#'   columns = columns_spec(
#'     choices = c("SEX", "AGE"),
#'     selected = c("AGE"),
#'     multiple = TRUE,
#'     fixed = FALSE
#'   )
#' )
#'
#' app <- teal::init(
#'   data = cdisc_data(
#'     ASL = data_for_teal(
#'       asl,
#'       keys = c("USUBJID", "STUDYID"),
#'       source = "radsl(N = 600)"
#'     ),
#'     ADTE = data_for_teal(
#'       adte,
#'       keys = c("USUBJID", "STUDYID", "PARAMCD"),
#'       source = "radaette(radsl(N = 600))"
#'     )
#'   ),
#'   modules = root_modules(
#'     tm_g_regression(
#'       label = "Regression",
#'       dataname = c("ASL", "ADTE"),
#'       response = list(adte_extracted_response),
#'       regressor = list(
#'         asl_extracted,
#'         adte_extracted_regressor
#'       )
#'     )
#'   )
#' )
#' \dontrun{
#' shinyApp(app$ui, app$server)
#' }
tm_g_regression <- function(
label = "Regression Analysis",
dataname,
regressor,
response,
plot_height = c(600, 200, 2000),
pre_output = NULL,
post_output = NULL) {
# Error prevention
stopifnot(!is.null(dataname))
stopifnot(dataname != "")
# No check necessary for regressor and response, as checked in data_extract_input
# Send ui args
args <- as.list(environment())
teal::module(
label = label,
server = srv_g_regression,
ui = ui_g_regression,
ui_args = args,
server_args = list(regressor = regressor, response = response, dataname = dataname),
filters = "all"
)
}
#' @import teal
ui_g_regression <- function(id, ...) {
arguments <- list(...)
ns <- NS(id)
standard_layout(
output = teal.devel::white_small_well(
tags$div(
# This shall be wrapped in a teal::plot
plot_height_output(id = ns("myplot")),
tags$div(verbatimTextOutput(ns("text")))
)
),
encoding = div(
helpText("Datasets: ", arguments$dataname %>% lapply(., tags$code)),
data_extract_input(
id = ns("regressor"),
label = "Regressor Variable",
data_extract_spec = arguments$regressor
),
data_extract_input(
id = ns("response"),
label = "Response Variable",
data_extract_spec = arguments$response
),
radioButtons(ns("plot_type"),
label = "Plot Type",
choices = c(
"Response vs Regressor",
"Residuals vs Fitted",
"Normal Q-Q", "Scale-Location", "Cook's distance", "Residuals vs Leverage",
"Cook's dist vs Leverage h[ii]/(1 - h[ii])"
),
selected = "Response vs Regressor"
),
# This shall be wrapped in a teal::plot
plot_height_input(id = ns("myplot"), value = arguments$plot_height)
),
pre_output = arguments$pre_output,
post_output = arguments$post_output,
forms = actionButton(ns("show_rcode"), "Show R Code", width = "100%")
)
}
#' @importFrom graphics plot abline
#' @importFrom methods is
srv_g_regression <- function(input, output, session, datasets, dataname, response, regressor) {
stopifnot(is.list(response))
stopifnot(is.list(regressor))
use_chunks(session)
# Data Extraction
regressor_data <- callModule(data_extract_module,
id = "regressor",
datasets = datasets,
data_extract_spec = regressor
)
response_data <- callModule(data_extract_module,
id = "response",
datasets = datasets,
data_extract_spec = response
)
fit <- reactive({
response_var = get_dataset_prefixed_col_names(response_data())
regressor_var = get_dataset_prefixed_col_names(regressor_data())
merged_dataset <- merge_datasets(list(response_data(), regressor_data()))
validate_has_data(merged_dataset, 10)
renew_chunk_environment(envir = environment())
session$userData$chunks$refresh()
form %<chunk_env%
as.formula(
paste(response_var,
paste(regressor_var,
collapse = " + "
),
sep = " ~ "
))
set_chunk(
expression = quote(fit <- lm(form, data = merged_dataset)) %>% substituteDirect(list(form = form))
)
summary %<chunk%
quote(summary <- summary(fit))
eval_remaining()
})
output$plot <- renderPlot({
fit()
if (input$plot_type == "Response vs Regressor") {
fit <- get_envir_chunks()$fit
if (ncol(fit$model) > 1) {
validate(need(dim(fit$model)[2] < 3, "Response vs Regressor is not provided for >2 Regressors"))
plot %<chunk%
plot(fit$model[, 2:1])
} else {
plot %<chunk% {
plot_data <- data.frame(fit$model[, 1], fit$model[, 1])
names(plot_data) <- rep(names(fit$model), 2)
plot <- plot(plot_data)
abline(merged_dataset)
}
}
} else {
i <-
which(input$plot_type == c(
"Residuals vs Fitted",
"Normal Q-Q", "Scale-Location", "Cook's distance", "Residuals vs Leverage",
"Cook's dist vs Leverage h[ii]/(1 - h[ii])"
))
plot %<chunk%
plot(fit, which = i, id.n = NULL) %substitute% list(i = i)
}
eval_remaining()
})
# Insert the plot into a plot_height module from teal.devel
callModule(plot_with_height,
id = "myplot",
plot_height = reactive(input$myplot),
plot_id = session$ns("plot"))
output$text <- renderPrint({
fit()
return(get_envir_chunks()$summary)
})
observeEvent(input$show_rcode, {
title <- paste("RegressionPlot of ",  get_dataset_prefixed_col_names(response_data()), " ~ ",
get_dataset_prefixed_col_names(regressor_data()))
teal.devel::show_rcode_modal(
title = "R Code for a Regression Plot",
rcode = get_rcode(
datasets = datasets,
dataname = dataname,
merged_dataname = "merged_dataset",
merged_datasets = list(response_data(), regressor_data()),
title = title,
description = "",
libraries = c("random.cdisc.data"),
git_pkgs = list(roche = c("NEST/teal", "NEST/random.cdisc.data", "NEST/teal.devel", "NEST/teal.modules.general"))
)
)
})
}
runApp('inst')
roxygen2::roxygenise()
library(teal.devel)
runApp('inst')
selected_chunk_ids
chunks
merged_datasets
merged_dataname
dataname
#'
#' @inheritDotParams get_rcode_header -data -datasets -datanames
#'
#' @export
#'
#' @return Return the R Code needed to reproduce a teal module. The \link{get_rcode_header} part allows
#'    to install the module. It additionally calls \link{get_filter_txt} to produce the filtered
#'    data call. If code chunks were used, these will also be used to derive module RCode.
#'
#' @importFrom rlang push_options
get_rcode <- function(datasets = NULL,
dataname = NULL,
merged_dataname = NULL,
merged_datasets = NULL,
chunks = parent.env(parent.frame())$session$userData$chunks,
selected_chunk_ids = c(),
...) {
if (!is(chunks, "chunks")) {
stop("No code chunks given")
}
push_options(width = 120)
browser()
if (!is.null(merged_dataname) && !is.null(merged_datasets)){
str_merge <- get_rcode_data_extract(
dataname = merged_dataname,
data_to_merge = merged_datasets
)
} else {
str_merge <- ""
}
if (!is.null(datasets)) {
if (!("FilteredData" %in% class(datasets))){
stop("get_rcode can only handle datasets of class 'teal::FilteredData'")
}
str_header <- get_rcode_header(...)
str_preproc <- datasets$get_data(dataname[[1]]) %>% attr("source")
str_filter <- teal.devel::get_filter_txt(dataname, datasets)
if (str_filter != "") {
str_filter <- paste0(str_filter, "\n\n")
}
} else {
str_header <- get_rcode_header(...)
str_filter <- ""
str_preproc <- ""
}
if (chunks$contains_any_chunk()) {
str_chunks <- paste0(
chunks$get_rcode(chunk_ids = selected_chunk_ids),
collapse = "\n"
)
}
code <- paste(
c(
"\n",
str_header,
str_preproc,
str_filter,
str_merge,
str_chunks,
"\n"
),
collapse = ""
)
return(code)
}
datasets
selected_chunk_ids
chunks$contains_any_chunk()
chunks$contains_any_chunk
roxygen2::roxygenise()
library(teal.devel)
runApp('inst')
library(teal.devel)
runApp('inst')
roxygen2::roxygenise()
library(teal.devel)
library(random.cdisc.data) #nolint
library(magrittr)
asl <- radsl(N = 600)
adte <- radtte(asl, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
adte_filters <- filter_spec(
vars = c("PARAMCD"), # only key variables are allowed
sep = " - ",
choices = c("OS", "PFS", "EFS"),
selected = "OS",
multiple = TRUE, # if multiple, then a spread is needed
label = "Choose endpoint"
)
adte_extracted1 <- data_extract_spec(
dataname = "ADTE",
filter = adte_filters,
columns = columns_spec(
choices = c("AVAL", "AVALU", "BMRKR1", "SITEID"),
selected = c("AVAL"),
multiple = TRUE,
fixed = FALSE, # Whether the user can select the item (optional)
label = "Column" # Label the column select dropdown (optional)
)
)
adte_extracted <- data_extract_spec(
dataname = "ADTE",
filter = adte_filters,
columns = columns_spec(
choices = c("AVAL", "BMRKR1"),
selected = c("AVAL"),
multiple = FALSE,
fixed = FALSE, # Whether the user can select the item
label = "" # Label the column select dropdown (optional)
)
)
asl_extracted <- data_extract_spec(
dataname = "ASL",
columns = columns_spec(
choices = c("SEX", "AGE"),
selected = c("AGE"),
multiple = TRUE,
fixed = FALSE
)
)
x <- teal::init(
data = cdisc_data(
ASL = data_for_teal(
asl,
keys = c("USUBJID", "STUDYID"),
source = "radsl(N = 600)  %>% dplyr::mutate(A = 1)"
),
ADTE = data_for_teal(
adte,
keys = c("USUBJID", "STUDYID", "PARAMCD"),
source = "radtte(ASL, event.descr = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\"))"
)
),
modules = root_modules(
teal.modules.general::tm_g_regression(
label = "Regression",
dataname = c("ASL","ADTE"),
response = list(adte_extracted),
regressor = list(
asl_extracted,
adte_extracted1
)
)
)
)
shinyApp(x$ui, x$server)
library(teal.devel)
runApp('dev/teal_tm_modules_general_07.R')
runApp('dev/teal_tm_modules_general_07.R')
