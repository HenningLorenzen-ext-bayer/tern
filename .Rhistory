factor(rep(TRUE, length(x)))
col_by <- no_by("All")
factor(rep(TRUE, length(x)), levels = col_by)
res <- factor(rep(TRUE, length(x)))
levels(res) <- col_by
res
pkgdown::build_reference()
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
t_summary(ADSL$AGE, ADSL$ARM, total = no_by("All"))
library(random.cdisc.data)
ADSL <- radsl(N = 100, seed = 1)
t_summary(ADSL$AGE, ADSL$ARM)
t_summary(ADSL$AGE, ADSL$ARM, total = no_by("All"))
add_total_by
t_summary(ADSL$AGE, col_by = add_total_by(factor_to_matrix_by(ADSL$ARM), label = "All")
t_summary(ADSL$AGE, col_by = add_total_by(factor_to_matrix_by(ADSL$ARM), label = "All"))
?table
table(ADSL$ARM)
install.packages("../rtables/", repos = NULL, type="source")
table(col_by)
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
install.packages("../rtables/", repos = NULL, type="source")
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
col_by
t_summary(iris$Sepal.Length, iris$Species)
col_by
col_N
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
library(random.cdisc.data)
ADSL <- radsl(N = 100, seed = 1)
t_summary(ADSL$AGE, ADSL$ARMCD)
ADSL <- cadsl # radsl(N = 100, seed = 1)
t_summary(ADSL$AGE, ADSL$ARMCD)
t_summary(ADSL[, c("AGE", "SEX", "RACE")], ADSL$ARMCD)
ADSL[, c("AGE", "SEX", "RACE")]
ADSL$ARMCD
t_summary(ADSL[, c("AGE", "SEX", "RACE")], ADSL$ARMCD)
length(ADSL[, c("AGE", "SEX", "RACE")])
devtools::load_all(".")
t_summary(ADSL[, c("AGE", "SEX", "RACE")], ADSL$ARMCD)
x <- iris
var_labels(x)
#' @return a named character vector with the variable labels, the names
#'   correspond to the variable names
#'
#' @export
#'
#' @examples
#' x <- iris
#' var_labels(x)
#' var_labels(x) <- paste("label for", names(iris))
#' var_labels(x)
var_labels <- function(x, fill = FALSE) {
stopifnot(is.data.frame(x))
y <- Map(function(var, name) {
lbl <- attr(var, "label")
if (is.null(lbl)) {
if (fill) {
name
} else {
NA_character_
}
} else {
if (!is.character(lbl) && !(length(lbl) == 1)) {
stop("label for variable ", name, "is not a character string")
}
as.vector(lbl)
}
}, x, names(x))
labels <- unlist(y, recursive = FALSE, use.names = TRUE)
if (!is.character(labels)) {
stop("label extraction failed")
}
labels
}
x <- iris
var_labels(x)
var_labels(x) <- paste("label for", names(iris))
#'
#' @examples
#' x <- iris
#' var_labels(x)
#' var_labels(x) <- paste("label for", names(iris))
#' var_labels(x)
#'
#' \dontrun{
#' View(x) # in RStudio data viewer labels are displayed
#' }
`var_labels<-` <- function(x, value) {
stopifnot(
is.data.frame(x),
is.character(value),
ncol(x) == length(value)
)
for (j in seq_along(x)) {
attr(x[[j]], "label") <- if (!is.na(value[j])) {
value[j]
} else {
NULL
}
}
x
}
#'
#' @param x an object
#'
#' @return the label attribute of an object
#'
#' @export
#'
#' @examples
#' x <- with_label(c(1,2,3), label = "Test")
#' label(x)
label <- function(x) {
attr(x, "label")
}
#' Return an object with a label attribute
#'
#' @param x an object
#' @param label label attribute to to attached to  \code{x}
#'
#' @export
#'
#' @examples
#' x <- with_label(c(1,2,3), label = "Test")
#' label(x)
with_label <- function(x, label) {
attr(x, "label") <- label
x
}
#' @return a named character vector with the variable labels, the names
#'   correspond to the variable names
#'
#' @export
#'
#' @examples
#' x <- iris
#' var_labels(x)
#' var_labels(x) <- paste("label for", names(iris))
#' var_labels(x)
var_labels <- function(x, fill = FALSE) {
stopifnot(is.data.frame(x))
y <- Map(function(var, name) {
lbl <- attr(var, "label")
if (is.null(lbl)) {
if (fill) {
name
} else {
NA_character_
}
} else {
if (!is.character(lbl) && !(length(lbl) == 1)) {
stop("label for variable ", name, "is not a character string")
}
as.vector(lbl)
}
}, x, names(x))
labels <- unlist(y, recursive = FALSE, use.names = TRUE)
if (!is.character(labels)) {
stop("label extraction failed")
}
labels
}
#'
#' @examples
#' x <- iris
#' var_labels(x)
#' var_labels(x) <- paste("label for", names(iris))
#' var_labels(x)
#'
#' \dontrun{
#' View(x) # in RStudio data viewer labels are displayed
#' }
`var_labels<-` <- function(x, value) {
stopifnot(
is.data.frame(x),
is.character(value),
ncol(x) == length(value)
)
for (j in seq_along(x)) {
attr(x[[j]], "label") <- if (!is.na(value[j])) {
value[j]
} else {
NULL
}
}
x
}
#' @param ... name-value pairs, where name corresponds to a variable name in
#'   \code{x} and the value to the new variable label
#'
#' @return a copy of \code{x} with changed labels according to \code{...}
#'
#' @export
#'
#' @examples
#' x <- var_relabel(iris, Sepal.Length = "Sepal Length of iris flower")
#' var_labels(x)
var_relabel <- function(x, ...) {
stopifnot(is.data.frame(x))
dots <- list(...)
varnames <- names(dots)
stopifnot(!is.null(varnames))
map_varnames <- match(varnames, names(x))
if (any(is.na(map_varnames))) {
stop("variables: ", paste(varnames[is.na(map_varnames)], collapse = ", "), " not found")
}
if (any(vapply(dots, Negate(is.character), logical(1)))) {
stop("all variable labels must be of type character")
}
for (i in seq_along(map_varnames)) {
attr(x[[map_varnames[[i]]]], "label") <-  dots[[i]]
}
x
}
#' Removing labels attributes from a variables in a data frame
#'
#' @param x a \code{data.frame} object
#'
#' @return the same data frame as \code{x} stripped of variable labels
#'
#' @export
#'
#' @examples
#' x <- var_labels_remove(iris)
var_labels_remove <- function(x) {
stopifnot(is.data.frame(x))
for (i in 1:ncol(x)) {
attr(x[[i]], "label") <- NULL
}
x
}
x <- iris
var_labels(x)
var_labels(x) <- paste("label for", names(iris))
var_labels(x)
var_labels(x)
names(x)
colnames(iris)
names(x)
?match
source('~/tern/move_back/labels.R', echo=TRUE)
x <- var_labels_remove(iris)
var_labels(x)
seq_along(x)
x <- iris
seq_along(x)
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
library(random.cdisc.data)
ADSL <- cadsl # radsl(N = 100, seed = 1)
t_summary(ADSL$AGE, ADSL$ARMCD)
t_summary(ADSL[, c("AGE", "SEX", "RACE")], ADSL$ARMCD)
devtools::load_all(".")
devtools::load_all(".")
t_summary(ADSL[, c("AGE", "SEX", "RACE")], ADSL$ARMCD)
devtools::load_all(".")
t_summary(ADSL[, c("AGE", "SEX", "RACE")], ADSL$ARMCD)
tbl, col_N
tbl
col_N
tbl <- rtable(
header = ncol(col_by),
rrowl(paste("no t_summary method for class:", class(x)), lapply(ncol(col_by), function(x) rcell("-")))
)
header_add_N(tbl, col_N)
tbl
tbl <- rtable(
header = ncol(col_by),
rrowl(paste("no t_summary method for class:", class(x)), lapply(colnames(col_by), function(x) rcell("-")))
)
tbl <- rtable(
header = colnames(col_by),
rrowl(paste("no t_summary method for class:", class(x)), lapply(colnames(col_by), function(x) rcell("-")))
)
header_add_N(tbl, col_N)
t_summary(structure(1:5, class = "aaa"), factor(LETTERS[c(1,2,1,1,2)]))
t_summary(structure(1:5, class = "aaa"), factor(LETTERS[c(1,2,1,1,2)]))
devtools::load_all(".")
t_summary(structure(1:5, class = "aaa"), factor(LETTERS[c(1,2,1,1,2)]))
t_summary(iris$Sepal.Length, iris$Species)
library(random.cdisc.data)
library(dplyr)
library(rtables)
ADSL <- radsl(N = 100, seed = 1)
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
ADSL[, c("SEX", "AGE")]
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
col_by
x
col_by
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
col_by
x
debug_once(col_by_to_matrix)
debugonce(col_by_to_matrix)
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
t_summary(iris$Sepal.Length, iris$Species)
library(random.cdisc.data)
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
library(random.cdisc.data)
library(dplyr)
library(rtables)
ADSL <- radsl(N = 100, seed = 1)
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
col_by_to_matrix(col_by, x)
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
library(random.cdisc.data)
library(dplyr)
library(rtables)
ADSL <- radsl(N = 100, seed = 1)
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
indent <- 2
varlabel <- "hell"
indent <- 2
indent_table(rrow(varlabel), indent)
indent_table <- function(x, n) {
for (i in 1:nrow(x)) {
attr(x[[i]], "indent") <- attr(x[[i]], "indent") + n
}
x
}
indent_table(rrow(varlabel), indent)
rrow(varlabel)
nrow(rrow(varlabel))
#' Converts the object to an rtable
#'
#' @param x object
#'
#' @export to_rtable
setGeneric(
"to_rtable",
function(x, ...) standardGeneric("to_rtable"),
signature = "x"
)
#' @param ... additional args needed for conversion
#'
#' @examples
#' n11 <- node(name = "A", content = array(c(1:6), dim = c(2,3)), children = list())
#' n12 <- node(name = "B", content = array(c(1:6), dim = c(2,3)), children = list())
#' n13 <- node(name = "C", content = array(c(1:6), dim = c(2,3)), children = list())
#' n2 <- node(name = "D", content = c(1:3), children = list(n11, n12, n13))
#'
#' @export to_rtable
#' @rdname to_rtable
setMethod("to_rtable", signature = "node", definition = function(x, ...) {
gap <- 1
stopifnot(is.null(x@content) || is(x@content, "rtable"))
tbls <- c(list(x@content), lapply(x@children, to_rtable))
tbl <- rbindl_rtables(tbls, gap = gap)
if (!is.null(x@name)) {
insert_rrow(indent_table(tbl, 1), rrow(x@name))
}
})
setMethod("to_rtable", signature = "rtable", definition = function(x, ...) {
x
})
n11 <- node(name = "A", content = array(c(1:6), dim = c(2,3)), children = list())
n12 <- node(name = "B", content = array(c(1:6), dim = c(2,3)), children = list())
n13 <- node(name = "C", content = array(c(1:6), dim = c(2,3)), children = list())
n2 <- node(name = "D", content = c(1:3), children = list(n11, n12, n13))
to_rtable(n2)
devtools::load_all(".")
t_summary(iris$Sepal.Length, iris$Species)
library(random.cdisc.data)
library(dplyr)
library(rtables)
ADSL <- radsl(N = 100, seed = 1)
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
object
is.character(NULL)
?setValidity
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
?is
?structure
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
tbl
x@children
list(x@content)
x@content
if (is(x@name, "invisible_node_name")) {
insert_rrow(indent_table(tbl, 1), rrow(x@name))
}
insert_rrow
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
if (is(x@name, "invisible_node_name")) {
insert_rrow(indent_table(tbl, 1), rrow(x@name))
}
insert_rrow(indent_table(tbl, 1), rrow(x@name))
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
denominator
col_by[!is.na(x)]
!is.na(x)
col_by
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
col_by
?sum
col_by[!is.na(x), ]
sum(c(col_by[!is.na(x), ], col_by[!is.na(x), ]))
colSums(c(col_by[!is.na(x), ], col_by[!is.na(x), ]))
?data.frame
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
colSums(col_by[!is.na(x), ])
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by  = by_all("All"), col_N = nrow(ADSL))
col_by[!is.na(x), , drop = FALSE]
colSums(col_by[!is.na(x), , drop = FALSE])
?count_n
??count_n
?tapply
devtools::load_all(".")
t_summary(iris$Species, iris$Species)
t_summary(iris$Species, iris$Species)
col_by
devtools::load_all(".")
t_summary(iris$Species, iris$Species)
rtabulate(as.numeric(x), col_by, count_n, row.name = "n")
col_by
x
rtabulate(
x = x,
col_by = col_by,
FUN = function(x_cell, denom) {
if (length(x_cell) > 0) {
length(x_cell) * c(1, 1 / denom)
} else {
rcell("-", format = "xx")
}
},
format = "xx (xx.xx%)",
col_wise_args = list(denom = denom)
)
x
nrow(col_by) == length(x)
nrow(col_by)
length(x)
x
t_summary(iris$Species, iris$Species)
length(x)
debugonce(rtabulate.factor)
debugonce(rtables::rtabulate.factor)
debugonce(rtables:::rtabulate.factor)
t_summary(iris$Species, iris$Species)
length(x)
t_summary(iris$Species, iris$Species)
debugonce(rtables:::rtabulate.factor)
length(as.data.frame(x))
t_summary(iris$Species, iris$Species)
x
class(x)
t_summary(iris$Species, iris$Species)
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
t_summary(iris$Species, iris$Species)
devtools::load_all(".")
t_summary(iris$Species, iris$Species)
devtools::load_all(".")
t_summary(iris$Species, iris$Species)
library(random.cdisc.data)
ADSL <- cadsl
t_summary(ADSL$SEX, ADSL$ARM, total = "All")
t_summary(ADSL$SEX, ADSL$ARM, total = "All")
col_by
ncol(col_by)
length(col_N)
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
devtools::load_all(".")
devtools::load_all(".")
?gsubfn
??gsubfn
#'
#' library(random.cdisc.data)
#' ADSL <- cadsl
#'
#' t_summary(ADSL$SEX, ADSL$ARM, total = "All")
#' t_summary(ADSL$SEX, ADSL$ARM, useNA = "always")
#'
#' ADSL$SEX[1:10] <- NA
#' t_summary(ADSL$SEX, ADSL$ARM, denominator = "N", useNA = "ifany", total = "All")
#' t_summary(ADSL$SEX, ADSL$ARM, denominator = "n", useNA = "no", total = "All")
default_col_N <- function(x, col_by) {
stopifnot(is.data.frame(col_by))
colSums(x)
}
