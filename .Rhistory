attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare[["arg2"]], "dataname") <- "arg2"
attr(result_to_compare[["arg3"]], "dataname") <- "arg3"
attr(result_to_compare[["ASL"]], "source") <- "# !!! Preprocessing code is empty"
attr(result_to_compare[["arg2"]], "source") <- "# !!! Preprocessing code is empty"
attr(result_to_compare[["arg3"]], "source") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
})
test_that("Empty code", {
x <- 1
attr(x, "keys") <- "test"
# missing code
result <- cdisc_data(x, check = FALSE)
expect_identical(attr(result[[1]], "source"), "# !!! Preprocessing code is empty")
# NULL code
result <- cdisc_data(x, code = NULL, check = FALSE)
expect_identical(attr(result[[1]], "source"), "# !!! Preprocessing code is empty")
# empty code
result <- cdisc_data(x, code = "", check = FALSE)
expect_identical(attr(result[[1]], "source"), "# !!! Preprocessing code is empty")
# multiple datasets
# missing code
result <- cdisc_data(x, arg1 = x, arg2 = x, check = FALSE)
expect_identical(attr(result$ASL, "source"), "# !!! Preprocessing code is empty")
expect_identical(attr(result$arg1, "source"), "# !!! Preprocessing code is empty")
expect_identical(attr(result$arg2, "source"), "# !!! Preprocessing code is empty")
# NULL code
result <- cdisc_data(x, arg1 = x, arg2 = x, code = NULL, check = FALSE)
expect_identical(attr(result$ASL, "source"), "# !!! Preprocessing code is empty")
expect_identical(attr(result$arg1, "source"), "# !!! Preprocessing code is empty")
expect_identical(attr(result$arg2, "source"), "# !!! Preprocessing code is empty")
# empty code
result <- cdisc_data(x, arg1 = x, arg2 = x, code = "", check = FALSE)
expect_identical(attr(result$ASL, "source"), "# !!! Preprocessing code is empty")
expect_identical(attr(result$arg1, "source"), "# !!! Preprocessing code is empty")
expect_identical(attr(result$arg2, "source"), "# !!! Preprocessing code is empty")
})
test_that("Non empty code", {
x <- 1
attr(x, "keys") <- "test"
result <- cdisc_data(x, code = "test code", check = FALSE)
expect_identical(attr(result[[1]], "source"), "test code")
result <- cdisc_data(x, arg1 = x, arg2 = x, code = "test code", check = FALSE)
expect_identical(attr(result$ASL, "source"), "test code")
expect_identical(attr(result$arg1, "source"), "test code")
expect_identical(attr(result$arg2, "source"), "test code")
})
test_that("Arguments creaded by code", {
result <- cdisc_data(x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = FALSE)
result_to_compare <- list(ASL = 1)
attr(result_to_compare[["ASL"]], "keys") <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare[["ASL"]], "source") <- "x <- 1; attr(x, 'keys') <- 'test'"
expect_identical(result, result_to_compare)
code <- paste(
"x <- 1; attr(x, 'keys') <- 'test';",
"y <- 2; attr(y, 'keys') <- 'test';",
"z <- 3; attr(z, 'keys') <- 'test';"
)
result <- cdisc_data(x, arg2 = y, arg3 = z, code = code, check = FALSE)
result_to_compare <- list(ASL = 1, arg2 = 2, arg3 = 3)
attr(result_to_compare[["ASL"]], "keys") <- "test"
attr(result_to_compare[["arg2"]], "keys") <- "test"
attr(result_to_compare[["arg3"]], "keys") <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare[["arg2"]], "dataname") <- "arg2"
attr(result_to_compare[["arg3"]], "dataname") <- "arg3"
attr(result_to_compare[["ASL"]], "source") <- code
attr(result_to_compare[["arg2"]], "source") <- code
attr(result_to_compare[["arg3"]], "source") <- code
expect_identical(result, result_to_compare)
})
test_that("Error - ASL is missing", {
expect_error(cdisc_data(arg1 = 1, code = NULL, check = FALSE), "ASL and code arguments are missing")
expect_error(cdisc_data(code = "x <- 2", check = FALSE), "ASL is missing and cannot be generated by code")
})
test_that("Error - checking is forbidden if any argument is call", {
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
x <- 1
attr(x, "keys") <- "test"
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
expect_error(
cdisc_data(foo(1), code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
})
test_that("Error - not named arguments", {
x <- 1
expect_error(
cdisc_data(x, x, code = NULL, check = FALSE),
"All arguments passed to '...' should be named"
)
expect_error(
cdisc_data(y, y, code = "y <- 1", check = FALSE),
"All arguments passed to '...' should be named"
)
})
test_that("Error - no keys attribute", {
x <- 1
expect_error(
cdisc_data(x, code = NULL, check = FALSE),
"Cannot find 'keys' attribute"
)
x <- 1
attr(x, "keys") <- "test"
y <- 2
expect_error(
cdisc_data(x, arg1 = y, code = NULL, check = FALSE),
"Cannot find 'keys' attribute"
)
x <- 1
attr(x, "keys") <- "test"
expect_error(
cdisc_data(x, arg1 = z, code = "z <- 3", check = FALSE),
"Cannot find 'keys' attribute"
)
})
test_that("Error - keys do not match", {
x1 <- 1
attr(x1, "keys") <- "test1"
x2 <- 1
attr(x2, "keys") <- "test2"
code <- paste(
"x1 <- 1; attr(x1, 'keys') <- 'test1';",
"x2 <- 1; attr(x2, 'keys') <- 'test2';"
)
expect_error(
cdisc_data(x1, arg1 = x2, code = code, check = FALSE),
"Cannot find match of .* keys"
)
})
test_that("Error - cannot reproduce object", {
x1 <- 1
attr(x1, "keys") <- "test"
x2 <- 2
attr(x2, "keys") <- "test"
code <- paste(
"x1 <- 10; attr(x1, 'keys') <- 'test';",
"x2 <- 20; attr(x2, 'keys') <- 'test';"
)
expect_error(
cdisc_data(x1, arg1 = x2, code = code, check = TRUE),
"Cannot reproduce"
)
})
x1 <- 1
attr(x1, "keys") <- "test"
x2 <- 2
attr(x2, "keys") <- "test"
code <- paste(
"x1 <- 10; attr(x1, 'keys') <- 'test';",
"x2 <- 20; attr(x2, 'keys') <- 'test';"
)
code
cdisc_data(x1, arg1 = x2, code = code, check = TRUE)
expect_error(
cdisc_data(x1, arg1 = x2, code = code, check = TRUE),
"Cannot reproduce"
)
x1 <- 1
attr(x1, "keys") <- "test"
x2 <- 2
attr(x2, "keys") <- "test"
code <- paste(
"x1 <- 10; attr(x1, 'keys') <- 'test';",
"x2 <- 20; attr(x2, 'keys') <- 'test';"
)
expect_error(
cdisc_data(x1, arg1 = x2, code = code, check = TRUE),
"Cannot reproduce"
)
x1 <- 1
attr(x1, "keys") <- "test1"
x2 <- 1
attr(x2, "keys") <- "test2"
code <- paste(
"x1 <- 1; attr(x1, 'keys') <- 'test1';",
"x2 <- 1; attr(x2, 'keys') <- 'test2';"
)
expect_error(
cdisc_data(x1, arg1 = x2, code = code, check = FALSE),
"Cannot find match of .* keys"
)
x <- 1
expect_error(
cdisc_data(x, x, code = NULL, check = FALSE),
"All arguments passed to '...' should be named"
)
expect_error(
cdisc_data(y, y, code = "y <- 1", check = FALSE),
"All arguments passed to '...' should be named"
)
})
test_that("Error - no keys attribute", {
x <- 1
expect_error(
cdisc_data(x, code = NULL, check = FALSE),
"Cannot find 'keys' attribute"
)
x <- 1
attr(x, "keys") <- "test"
y <- 2
expect_error(
cdisc_data(x, arg1 = y, code = NULL, check = FALSE),
"Cannot find 'keys' attribute"
)
x <- 1
attr(x, "keys") <- "test"
expect_error(
cdisc_data(x, arg1 = z, code = "z <- 3", check = FALSE),
"Cannot find 'keys' attribute"
)
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
x <- 1
attr(x, "keys") <- "test"
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
expect_error(
cdisc_data(foo(1), code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
expect_error(cdisc_data(arg1 = 1, code = NULL, check = FALSE), "ASL and code arguments are missing")
expect_error(cdisc_data(code = "x <- 2", check = FALSE), "ASL is missing and cannot be generated by code")
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(x, code = NULL, check = FALSE))
expect_silent(cdisc_data(x, arg1 = x, arg2 = x, code = NULL, check = FALSE))
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = FALSE))
expect_silent(cdisc_data(ASL = x, arg1 = x, arg2 = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = FALSE))
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = TRUE))
expect_silent(cdisc_data(ASL = x, arg1 = x, arg2 = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = TRUE))
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, check = TRUE))
expect_silent(cdisc_data(ASL = x, code = NULL, check = TRUE))
expect_silent(cdisc_data(ASL = x, code = "", check = TRUE))
x <- 1
attr(x, "keys") <- "test"
expect_identical(names(cdisc_data(x)), "ASL")
expect_identical(names(cdisc_data(ASL = x, arg1 = x, arg2 = x)), c("ASL", "arg1", "arg2"))
x <- 1
attr(x, "keys") <- "test"
result <- cdisc_data(x)
result_to_compare <- list(ASL = 1)
attr(result_to_compare[["ASL"]], "keys") <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare[["ASL"]], "source") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
x1 <- 1
attr(x1, "keys") <- "test"
x2 <- 2
attr(x2, "keys") <- "test"
x3 <- 3
attr(x3, "keys") <- "test"
result <- cdisc_data(x1, arg2 = x2, arg3 = x3)
result_to_compare <- list(ASL = 1, arg2 = 2, arg3 = 3)
attr(result_to_compare[["ASL"]], "keys") <- "test"
attr(result_to_compare[["arg2"]], "keys") <- "test"
attr(result_to_compare[["arg3"]], "keys") <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare[["arg2"]], "dataname") <- "arg2"
attr(result_to_compare[["arg3"]], "dataname") <- "arg3"
attr(result_to_compare[["ASL"]], "source") <- "# !!! Preprocessing code is empty"
attr(result_to_compare[["arg2"]], "source") <- "# !!! Preprocessing code is empty"
attr(result_to_compare[["arg3"]], "source") <- "# !!! Preprocessing code is empty"
x <- 1
attr(x, "keys") <- "test"
result <- cdisc_data(x)
result_to_compare <- list(ASL = 1)
attr(result_to_compare[["ASL"]], "keys") <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare[["ASL"]], "source") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
x1 <- 1
attr(x1, "keys") <- "test"
x2 <- 2
attr(x2, "keys") <- "test"
x3 <- 3
attr(x3, "keys") <- "test"
result <- cdisc_data(x1, arg2 = x2, arg3 = x3)
result_to_compare <- list(ASL = 1, arg2 = 2, arg3 = 3)
attr(result_to_compare[["ASL"]], "keys") <- "test"
attr(result_to_compare[["arg2"]], "keys") <- "test"
attr(result_to_compare[["arg3"]], "keys") <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare[["arg2"]], "dataname") <- "arg2"
attr(result_to_compare[["arg3"]], "dataname") <- "arg3"
attr(result_to_compare[["ASL"]], "source") <- "# !!! Preprocessing code is empty"
attr(result_to_compare[["arg2"]], "source") <- "# !!! Preprocessing code is empty"
attr(result_to_compare[["arg3"]], "source") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
x <- 1
attr(x, "keys") <- "test"
expect_identical(names(cdisc_data(x)), "ASL")
expect_identical(names(cdisc_data(ASL = x, arg1 = x, arg2 = x)), c("ASL", "arg1", "arg2"))
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, check = TRUE))
expect_silent(cdisc_data(ASL = x, code = NULL, check = TRUE))
expect_silent(cdisc_data(ASL = x, code = "", check = TRUE))
x <- 1
attr(x, "keys") <- "test"
expect_silent(cdisc_data(ASL = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = TRUE))
expect_silent(cdisc_data(ASL = x, arg1 = x, arg2 = x, code = "x <- 1; attr(x, 'keys') <- 'test'", check = TRUE))
test.nest::test_lintr()
setwwd("tests/testthat/")
context("get_rcode")
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
get_rcode_header(title = "My title"), "\n")
set_chunk("tbl", rlang::expr(data.frame(x = y)))
set_chunk("tbl", rlang::expr(data.frame(x = y)), chunks = session$userData$chunks)
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
strsplit(get_rcode_header(title = "My title"), "\n")
reference_string <- c(
"",
strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)"
)
strsplit(get_rcode(title = "My title"), "\n")[[1]]
get_rcode(title = "My title")
get_rcode
get_rcode(title = "My title", chunks = session$userData$chunks)
strsplit(get_rcode(title = "My title", chunks = session$userData$chunks), "\n")[[1]]
reference_string
strsplit(get_rcode(title = "My title", chunks = session$userData$chunks), "\n")[[1]]
expect_equal(
strsplit(get_rcode(title = "My title", chunks = session$userData$chunks), "\n")[[1]],
reference_string,
info = "Compare single expression chunk with get_rcode. no data."
)
context("get_rcode")
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)), chunks = session$userData$chunks)
)
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
reference_string <- c(
"",
strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)"
)
expect_equal(
strsplit(get_rcode(title = "My title", chunks = session$userData$chunks), "\n")[[1]],
reference_string,
info = "Compare single expression chunk with get_rcode. no data."
)
reference_string
strsplit(get_rcode(title = "My title", chunks = session$userData$chunks), "\n")[[1]]
getwd()
devtools::test()
reference_string
strsplit(get_rcode(title = "My title", chunks = session$userData$chunks)
strsplit(get_rcode(title = "My title", chunks = session$userData$chunks), "\n")[[1]]
strsplit(get_rcode(title = "My title"), "\n")[[1]]
strsplit(get_rcode(title = "My title"), "\n")[[1]]
expect_silent(
set_chunk("my_tbl", rlang::expr(summary(td)))
)
expect_error(
get_rcode(title = "My title", datasets = list(test_data), dataname = "td"),
"FilteredData",
info = "get_rcode shall just accept teal::FilteredData"
)
reference_string <- c(
"",
strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)",
"summary(td)"
)
strsplit(get_rcode(title = "My title"), "\n")[[1]]
reference_string
expect_equal(
strsplit(get_rcode(title = "My title"), "\n")[[1]],
reference_string,
info = "Compare two expression with dataname replacement."
)
teal_data <- teal:::FilteredData$new(datanames = c("ASL"))
attr(test_data, "source") <- "data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))"
teal_data$set_data("ASL", test_data)
#- third chunk including teal data
set_chunk("ASL_one", rlang::expr(summary(dataset)))
Q
devtools::test()
strsplit(get_rcode(title = "My title", datasets = teal_data, dataname = "ASL"), "\n")[[1]]
reference_string
expect_error(
get_rcode(),
"title",
info = "No title check."
)
roxygen2::roxygenise()
context("get_code")
file_path  <- "./app_get_code/app.R"
file_path1 <- "./app_get_code/app_source1.R"
file_path2 <- "./app_get_code/app_source2.R"
file_path3 <- "./app_get_code/app_source3.R"
setwd("tests/testthat/")
context("get_code")
file_path  <- "./app_get_code/app.R"
file_path1 <- "./app_get_code/app_source1.R"
file_path2 <- "./app_get_code/app_source2.R"
file_path3 <- "./app_get_code/app_source3.R"
starts_at = "# @start_code",
stops_at = "# @end_code",
exclude_comments = FALSE) %>%
strsplit("\n") %>%
.[[1]]
expect_identical(code_lines1[c(1, length(code_lines1))], c("# @start_code", "# @end_code"))
code_lines2 <- get_code(files_path = file_path,
starts_at = "ASL <-",
stops_at = "teal::init",
read_sources = FALSE) %>%
strsplit("\n") %>%
.[[1]]
code_lines1 <- get_code(files_path = file_path,
starts_at = "# @start_code",
stops_at = "# @end_code",
exclude_comments = FALSE) %>%
strsplit("\n") %>%
.[[1]]
expect_identical(code_lines1[c(1, length(code_lines1))], c("# @start_code", "# @end_code"))
code_lines2 <- get_code(files_path = file_path,
starts_at = "ASL <-",
stops_at = "teal::init",
read_sources = FALSE) %>%
strsplit("\n") %>%
.[[1]]
code_lines2
code_lines2 <- get_code(files_path = file_path,
starts_at = "set.seed",
stops_at = "teal::init",
read_sources = FALSE) %>%
strsplit("\n") %>%
.[[1]]
code_lines2
expect_identical(code_lines2[c(1, length(code_lines2))],
c("set.seed(1)", "x <- teal::init("))
runApp('app_get_code')
getwd()
setwd("app_get_code")
get_code("app.R") %>% cat
library(teal.devel)
set.seed(123)
asl <- radsl(N = 600)
adte <- radtte(asl, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
keys(asl) <- c("USUBJID", "STUDYID")
keys(adte) <- c("USUBJID", "STUDYID", "PARAMCD")
cdisc_data(
ASL = asl,
ADTE = adte,
code = c('
set.seed(123)
asl <- radsl(N = 600)
adte <- radtte(asl, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
keys(asl) <- c("USUBJID", "STUDYID")
keys(adte) <- c("USUBJID", "STUDYID", "PARAMCD")
)
set.seed(123)
asl <- radsl(N = 600)
adte <- radtte(asl, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
keys(asl) <- c("USUBJID", "STUDYID")
keys(adte) <- c("USUBJID", "STUDYID", "PARAMCD")
cdisc_data(
ASL = asl,
ADTE = adte,
code = 'set.seed(123)
asl <- radsl(N = 600)
adte <- radtte(asl, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
keys(asl) <- c("USUBJID", "STUDYID")
keys(adte) <- c("USUBJID", "STUDYID", "PARAMCD")')
test.nest::test_all()
devtools::document
grepl("\\", "\elo")
grepl("\\", "\\elo")
sources_path <- c("C:/Elo/zero", "/home/gonzo", "chujelo","\\elo\\2zero")
grepl("^(/|\\|[A-Za-z]:)", sources_path)
grepl("^(/|\\|[A-Za-z]:)", sources_path)
grepl("^(/)|^(\\)|^([A-Za-z]:)", sources_path)
grepl("^(/)|^([\\])|^([A-Za-z]:)", sources_path)
roxygen2::roxygenize()
roxygen2::roxygenize()
