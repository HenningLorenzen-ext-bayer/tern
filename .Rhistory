ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes) %>% map(na_as_level)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
c(list(by_all(label = total, n = length(rsp))), rows_by_lst %>% map(na_as_level))
by_all
col_by_to_matrix(by_all(label = total), n = length(rsp))
col_by_to_matrix
by_add_total(label = total, n = length(rsp))
by_add_total(NULL, label = total, n = length(rsp))
list(by_add_total(NULL, label = total, n = length(rsp)))
c(
list(by_add_total(NULL, label = total, n = length(rsp))),
rows_by_lst %>% map(na_as_level)
)
names(rows_by_lst)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
rows_by_lst
names(rows_by_lst)
Map(`%||%`, lapply(rows_by_lst, label), names(rows_by_lst))
rows_by_lst
rows_by_lst[[1]]
label(rows_by_lst[[1]])
label(by_add_total(NULL, label = total, n = length(rsp)))
with_label(by_add_total(NULL, label = "all", n = length(rsp)), total)
label(with_label(by_add_total(NULL, label = "all", n = length(rsp)), total))
Map(`%||%`, lapply(rows_by_lst, label), names(rows_by_lst))
rows_by_lst <- c(
list(with_label(by_add_total(NULL, label = "all", n = length(rsp)), total)),
rows_by_lst %>% map(na_as_level)
)
class(by_add_total(NULL, label = total, n = length(rsp)))
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
rows_by_lst
names(rows_by_lst)
Map(`%||%`, lapply(rows_by_lst, label), names(rows_by_lst))
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
tbl
tbl
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes)
)
tbl
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
devtools::load_all(".")
library(random.cdisc.data)
ADSL <- cadsl
ADVS <- cadvs
tern:::t_summarize_by_visit(data = ADVS[c("AVAL")], visit = ADVS$AVISIT, col_by = ADVS$ARM,
id = ADVS$USUBJID, col_N = table(ADSL$ARM))
tern:::t_summarize_by_visit(data = ADVS[c("PCHG")], visit = ADVS$AVISIT, col_by = ADVS$ARM,
id = ADVS$USUBJID, col_N = table(ADSL$ARM))
tern:::t_summarize_by_visit(
data = ADVS[c("AVAL", "CHG")],
visit = ADVS$AVISIT,
col_by = ADVS$ARM,
id = ADVS$USUBJID,
col_N = table(ADSL$ARM)
)
library(random.cdisc.data)
library(dplyr)
ADSL <- cadsl
ADQS <- cadqs %>%
dplyr::filter(PARAMCD == "BFIALL")
tbl <- t_summarize_by_visit(
data = ADQS[c("AVAL", "CHG")],
visit = ADQS$AVISIT,
col_by = ADQS$ARM,
id = ADQS$USUBJID,
col_N = table(ADSL$ARM)
)
tbl
Viewer(tbl)
library(random.cdisc.data)
ADSL <- cadsl
ADTTE <- cadtte
ADTTE_f <- subset(ADTTE, PARAMCD == "OS")
tbl <- t_tte(
formula = Surv(AVAL, !CNSR) ~ arm(ARM) + strata(SEX),
data = ADTTE_f,
event_descr = factor(EVNTDESC),
time_points = c(6, 2000),
time_unit = "month"
)
tbl
devtools::document()
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
by <- factor(c("M", "M", "F", "F", "F"))
esplit(1:5, by)
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::document()
devtools::document()
devtools::document()
devtools::run_examples()
by <- factor(c("M", "M", "F", "F", "F"))
esplit(data.frame(x = 1:5, y = 6:10), by)
devtools::run_examples()
devtools::run_examples()
C <- data.frame(USUBJID=paste0("id-",1:9), STUDYID = "A")
reorder_to_match_id(A, C)
A <- data.frame(USUBJID=paste0("id-",1:10), STUDYID = "A", stringsAsFactors = FALSE)
B <- data.frame(USUBJID=paste0("id-",10:1), STUDYID = "A", stringsAsFactors = FALSE)
reorder_to_match_id(A, B)
C <- data.frame(USUBJID=paste0("id-",1:9), STUDYID = "A")
reorder_to_match_id(A, C)
nrow(x)
x
nrow(ref)
ref
devtools::run_examples()
devtools::run_examples()
col_by
rsplit(
list(data.frame(x = 1:5, y = 6:10), data.frame(z1 = 11:15, z2 = 16:20)),
list(by_lst, by_lst)
)
by_lst <- list(factor(c("M", "M", "F", "F", "F")), factor(c("O", "Y", "Y", "Y", "Y")))
rsplit(
list(data.frame(x = 1:5, y = 6:10), data.frame(z1 = 11:15, z2 = 16:20)),
list(by_lst, by_lst)
)
rsplit(
list(data.frame(x = 1:5, y = 6:10), data.frame(z1 = 11:15, z2 = 16:20)),
list(by_lst)
)
devtools::load_all(".")
rsplit(
list(data.frame(x = 1:5, y = 6:10), data.frame(z1 = 11:15, z2 = 16:20)),
list(by_lst)
)
stopifnot(is.list(by_lst))
by_lst[[1]]
by_lst
by_lst
by_lst <- list(factor(c("M", "M", "F", "F", "F")), factor(c("O", "Y", "Y", "Y", "Y")))
by_lst
tern:::rsplit(
list(data.frame(x = 1:5, y = 6:10), data.frame(z1 = 11:15, z2 = 16:20)),
list(by_lst)
)
by_lst
by_lst
devtools::load_all(".")
by_lst <- list(factor(c("M", "M", "F", "F", "F")), factor(c("O", "Y", "Y", "Y", "Y")))
tern:::rsplit(
list(data.frame(x = 1:5, y = 6:10), data.frame(z1 = 11:15, z2 = 16:20)),
by_lst
)
devtools::load_all(".")
devtools::run_examples()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#' #' This function is useful to ensure that two datasets have the same subjects
#' #' ordered in the same way
#' #'
#' #' @param x data set to reorder
#' #' @param ref reference data set
#' #' @param key variables that define a unique patient
#' #'
#' #' @export
#' #'
#' #' @examples
#' #' A <- data.frame(USUBJID=paste0("id-",1:10), STUDYID = "A", stringsAsFactors = FALSE)
#' #'
#' #' @param x data set to reorder
#' #' @param ref reference data set
#' #' @param key variables that define a unique patient
#' #'
#' #' @export
#' #'
#' #' @examples
#' #' A <- data.frame(USUBJID=paste0("id-",1:10), STUDYID = "A", stringsAsFactors = FALSE)
#' #' B <- data.frame(USUBJID=paste0("id-",10:1), STUDYID = "A", stringsAsFactors = FALSE)
#' #'
devtools::document()
devtools::run_examples()
devtools::document()
devtools::run_examples()
devtools::document()
devtools::run_examples()
devtools::run_examples()
devtools::document()
devtools::document()
devtools::document()
devtools::run_examples()
devtools::run_examples()
devtools::document()
devtools::run_examples()
as_factor_keep_attributes(with_label(c(1,1,2,3), "id"))
devtools::run_examples()
grade_label
row_names_as_col(tbl, c("", grade_label))
devtools::run_examples()
get_N(data.frame(x = c(TRUE, TRUE, FALSE), y = c(FALSE, FALSE, TRUE)))
get_N(data.frame(A = c(TRUE, TRUE, FALSE), B = c(FALSE, FALSE, TRUE)))
col_N_add_total(get_N(data.frame(A = c(TRUE, TRUE, FALSE), B = c(FALSE, FALSE, TRUE))))
devtools::run_examples()
devtools::run_examples()
summary(t_events_per_term_id(
terms = as_factor_keep_attributes(ADAE$AEDECOD),
id = ADAE$USUBJID,
col_by = ADAE$ARM %>% by_add_total("All Patients"),
col_N = col_N_add_total(table(ADSL$ARM)),
table_tree = TRUE
))
library(dplyr)
library(random.cdisc.data)
ADSL <- radsl(10, seed = 1)
ADAE <- radae(ADSL, 4, seed = 2)
ADSL <- radsl(10, seed = 1)
ADCM <- radcm(ADSL, 5, seed = 4)
ADCM <- ADCM %>%
dplyr::filter(ATIREL == "CONCOMITANT")
tbls <- t_events_per_term_id(
terms = ADAE[, c("AEBODSYS", "AEDECOD")] %>% map(as_factor_keep_attributes),
id = ADAE$USUBJID,
col_by = ADAE$ARM %>% by_add_total("All Patients"),
col_N = col_N_add_total(table(ADSL$ARM)),
table_tree = TRUE
)
summary(tbls)
tbls[[1]]
tbls[['cl A']]
devtools::run_examples()
ADRS_f$ARM
library(random.cdisc.data)
library(dplyr)
ADSL <- radsl(seed = 1)
ADSL$'FAKE Name > -1.3 Flag' <- rep(c('Y', 'N'), 50)
ADRS <- radrs(ADSL, seed = 2)
ADRS_f <- subset(ADRS, PARAMCD == "BESRSPI") %>%
dplyr::filter(ARM != 'C: Combination') %>%
mutate(ARM = droplevels(ARM))
ADRS_f$ARM
tbls <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
by = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes),
table_tree = TRUE
)
tbls <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = ADRS_f$ARM,
rows_by_lst = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>% map(as_factor_keep_attributes),
table_tree = TRUE
)
summary(tbls)
devtools::run_examples()
data.frame(id = id, col_by) %>% group_by(.data$id) %>% summarise_all(sum) %>% select(-id)
col_by
devtools::run_examples()
devtools::run_examples(start = "t_summary.R")
devtools::run_examples(start = "t_summary.Rd")
devtools::run_examples(start = "t_summary.Rd")
devtools::test()
library(random.cdisc.data)
library(dplyr)
ADSL <- cadsl
levels(ADSL$RACE) <- strtrim(levels(ADSL$RACE), 10)
ADTTE <- cadtte
ADTTE_f <- subset(ADTTE, PARAMCD == "OS")
fit_km <- survfit(Surv(AVAL, 1-CNSR) ~ ARM, data = ADTTE_f, conf.type = "plain")
g_km(fit_km = fit_km)
devtools::load_all(".")
g_km(fit_km = fit_km)
col
g_km(fit_km = fit_km)
devtools::load_all(".")
g_km(fit_km = fit_km)
plot(fit_km)
p <- g_km(fit_km = fit_km, col = c("black", "red", "blue"), lty = c(1, 2, 3), draw = FALSE)
g_tkm <-  textGrob(label = toString(t_km(fit_km), gap = 1),
x = unit(1, "npc") - unit(2, "lines"),
y = unit(1, "npc") - unit(2, "lines"),
just = c("right", "top"),
gp = gpar(fontfamily = 'mono', fontsize = 8, fontface = "bold"))
p_t <- addGrob(p, gTree(children = gList(g_tkm), vp = vpPath("mainPlot", "kmCurve", "curvePlot")))
grid.newpage()
grid.draw(p_t)
g_km(fit_km, xlab = "Duration (Days)", col = "green")
ANL <- expand.grid(
VISIT = paste0("visit ", 1:10),
ARM = c("ARM A", "ARM B")
)
ANL$ARM <- factor(ANL$ARM)
ANL$VISIT <- factor(ANL$VISIT)
ANL$MEAN <- rnorm(nrow(ANL), 10, 2)
ANL$SD <- rnorm(nrow(ANL), 0, 1)
ANL$MEDIAN <- sample(c(1:20), nrow(ANL), replace = TRUE)
ANL$Q1 <- ANL$MEDIAN - 2.5
ANL$Q3 <- ANL$MEDIAN + 2.5
ANL$MIN <- ANL$MEDIAN - 5
ANL$MAX <- ANL$MEDIAN + 5
ANL$NVIS <- sample(c(50:100), nrow(ANL), replace = TRUE)
g_summary_by(
x = ANL$VISIT, y = ANL$MEDIAN, group = ANL$ARM,
y_lower = ANL$Q1, y_upper = ANL$Q3, n_visit = ANL$NVIS,
xlab = "Visit", ylab = "Mean Result", nlab = "Number of subject at each visit",
title = "Plot of mean and IQR"
)
devtools::load_all(".")
g_summary_by(
x = ANL$VISIT, y = ANL$MEDIAN, group = ANL$ARM,
y_lower = ANL$Q1, y_upper = ANL$Q3, n_visit = ANL$NVIS,
xlab = "Visit", ylab = "Mean Result", nlab = "Number of subject at each visit",
title = "Plot of mean and IQR"
)
col_by
devtools::load_all(".")
g_summary_by(
x = ANL$VISIT, y = ANL$MEDIAN, group = ANL$ARM,
y_lower = ANL$Q1, y_upper = ANL$Q3, n_visit = ANL$NVIS,
xlab = "Visit", ylab = "Mean Result", nlab = "Number of subject at each visit",
title = "Plot of mean and IQR"
)
col_by
is.factor(col_by)
attributes(col_by)
devtools::load_all(".")
g_summary_by(
x = ANL$VISIT, y = ANL$MEDIAN, group = ANL$ARM,
y_lower = ANL$Q1, y_upper = ANL$Q3, n_visit = ANL$NVIS,
xlab = "Visit", ylab = "Mean Result", nlab = "Number of subject at each visit",
title = "Plot of mean and IQR"
)
devtools::load_all(".")
g_waterfall(height = c(3,5,-1), id = letters[1:3])
g_waterfall(height = c(3,5,-1), id = letters[1:3], col = c("red", "green", "red"))
library(random.cdisc.data)
library(dplyr)
ADSL <- cadsl
ADSL_f <- ADSL %>%
select(USUBJID, STUDYID, ARM, ARMCD, SEX)
ADRS <- cadrs
ADRS_f <- subset(ADRS, PARAMCD == "OVRINV") %>%
mutate(pchg = rnorm(1200, 10, 50))
ADRS_f <- head(ADRS_f, 30)
ADRS_f <- ADRS_f[!duplicated(ADRS_f$USUBJID),]
head(ADRS_f)
g_waterfall(
height = ADRS_f$pchg,
id = ADRS_f$USUBJID,
col = ADRS_f$AVALC
)
g_waterfall(
height = ADRS_f$pchg,
id = ADRS_f$USUBJID,
col = ADRS_f$AVALC
)
g_waterfall(
height = ADRS_f$pchg,
id = paste("asdfdsfdsfsd",ADRS_f$USUBJID),
col = ADRS_f$SEX
)
g_waterfall(
height = ADRS_f$pchg,
id = paste("asdfdsfdsfsd",ADRS_f$USUBJID),
xlab = "ID",
ylab = "Percentage Change",
title = "Waterfall plot"
)
library(random.cdisc.data)
library(dplyr)
ADSL <- cadsl
ADTTE <- cadtte
ADTTE_f <- ADTTE %>%
dplyr::filter(PARAMCD == "OS" & ARMCD %in% c("ARM B", "ARM A")) %>%
mutate(ARMCD = droplevels(ARMCD))
tbl <- t_forest_tte(
tte = ADTTE_f$AVAL,
is_event = ADTTE_f$CNSR == 0,
col_by = ADTTE_f$ARMCD,
group_data = droplevels(ADTTE_f[, c("SEX", "RACE")]), # note factors required
ties = "exact",
dense_header = TRUE
)
devtools::run_examples()
devtools::test()
test_lintr()
devtools::load_all(".")
devtools::run_examples()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
t_summary(1:3, col_by = factor(c(NA, "a", "b")))
t_summary(1:3, col_by = addNA(factor(c(NA, "a", "b"))))
addNA
addNA(factor(c(NA, "a", "b")))
t_summary(1:3, col_by = addNA(factor(c(NA, "a", "b"))))
addNA(factor(c(NA, "a", "b")))
t_summary(1:3, col_by = addNA(factor(c(NA, "a", "b"))))
t_summary(1:3, col_by = addNA(factor(c(NA, "a", "b"))))
levels(x)
res
levels(x)
for (level in levels(x)) {
res[x == level, level] <- TRUE
}
x
res
res <- data.frame(res)
colnames(res) <- levels(x)
with_label(res, label(x))
stopifnot(is.factor(x))
res <- matrix(FALSE, nrow = length(x), ncol = nlevels(x))
colnames(res) <- levels(x)
for (level in levels(x)) {
res[x == level, level] <- TRUE
}
stopifnot(is.factor(x))
res <- matrix(FALSE, nrow = length(x), ncol = nlevels(x))
colnames(res) <- levels(x)
res
x == level
for (level in levels(x)) {
browser()
res[x == level, level] <- TRUE
}
level
res[x == level, level]
res
res
res[x == level, level]
res
level
level
x == level
res[x == level, level]
res[x == level, level] <- TRUE
res
levels(x)
levels(x)[[3]]
ddd <- levels(x)[[3]]
level
x == level
level
levels(x)
levels(x)
t_summary(x = factor(c(letters[1:5], NA)), col_by = factor(rep(c("I", "II"), 3)))
t_summary(x = factor(c(letters[1:5], NA)), col_by = factor(rep(c("I", "II"), 3)), useNA = "ifany")
levels(x)
t_summary(1:3, col_by = addNA(factor(c(NA, "a", "b"))))
t_summary(1:3, col_by = addNA(factor(c(NA, "a", "b"))))
level <- levels(x)[[3]]
level
match(x, level)
res[match(x, level), level]
res
match(x, level)
as.logical(match(x, level))
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tern)
t_summary(1:3, col_by = factor(c(NA, "a", "b")))
devtools::load_all(".")
t_summary(1:3, col_by = factor(c(NA, "a", "b")))
addNA
t_summary(1:3, col_by = na_as_level(factor(c(NA, "a", "b"))))
t_summary(1:3, col_by = factor(c(NA, "a", "b")))
t_summary(1:3, col_by = na_as_level(factor(c(NA, "a", "b"))))
remove.packages("rtables")
install.packages("../rtables/", repos = NULL, type="source")
