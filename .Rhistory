style_file(rstudioapi::getSourceEditorContext()$path)
test.nest::test_lintr()
style_file(rstudioapi::getSourceEditorContext()$path)
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
style_file(rstudioapi::getSourceEditorContext()$path)
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
styler:::style_active_file()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_strict()
test.nest::test_strict()
devtools::check()
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
choices
selected
if (!multiple) {
stopifnot(length(selected) == 1 && length(choices) == 1)
}
length_selected <- length(selected[[1]])
has_same_length <- function(elem) {
length(elem) == length_selected
}
stopifnot(all_true(choices, has_same_length))
stopifnot(all_true(selected, has_same_length))
devtools::load_all(".")
runApp('tests/testthat/app')
if (!multiple) {
stopifnot(length(selected) == 1 && length(choices) == 1)
}
length_selected <- length(selected[[1]])
has_same_length <- function(elem) {
length(elem) == length_selected
}
stopifnot(all_true(choices, has_same_length))
stopifnot(all_true(selected, has_same_length))
devtools::load_all(".")
runApp('tests/testthat/app')
columns
runApp('tests/testthat/app')
columns
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
if (!multiple) {
stopifnot(length(selected) == 1 && length(choices) == 1)
}
length_selected <- length(selected[[1]])
has_same_length <- function(elem) {
length(elem) == length_selected
}
stopifnot(all_true(choices, has_same_length))
runApp('tests/testthat/app')
runApp('tests/testthat/app')
list(choices = choices, selected = selected, multiple = multiple, show = show, label = label, ...)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
stopifnot(is.list(choices) && length(choices) >= 1 && all_true(choices, is.atomic))
choices
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
stopifnot(is.list(choices) && length(choices) >= 1 && all_true(choices, is.atomic))
stopifnot(is.list(selected) && length(selected) >= 1 && all_true(selected, is.atomic))
stopifnot(is.logical(multiple))
stopifnot(is.logical(show))
stopifnot(is.list(choices) && length(choices) >= 1 && all_true(choices, is.atomic))
stopifnot(is.list(selected) && length(selected) >= 1 && all_true(selected, is.atomic))
stopifnot(is.logical(multiple))
stopifnot(is.logical(show))
stopifnot(all(selected %in% choices)) # selected and choices must be a list to work correcty
# check for correct lengths
if (!multiple) {
stopifnot(length(selected) == 1 && length(choices) == 1)
}
selected
length(selected)
length(choices)
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
stopifnot(is.list(choices) && length(choices) >= 1 && all_true(choices, is.atomic))
choices
list(c(1,2))
list(1,2)
as.list(c(1,2))
as.list(list(1,2))
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
# check for correct lengths
stopifnot(multiple || length(selected) == 1)
selected
choices
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
?is
adte_filter_spec <- filter_spec(
vars = c("PARAMCD"), # only key variables are allowed
choices = c("OS", "PFS", "EFS"),
selected = "OS",
multiple = TRUE, # if multiple, then a spread is needed
label = "Choose endpoint",
sep = " - "
)
adte_extracted1 <- data_extract_spec(
dataname = "ADTE",
columns = column_choices_spec(
choices = c("AVAL", "AVALU", "BMRKR1", "SITEID"),
selected = c("AVAL"),
multiple = FALSE,
show = TRUE, # Whether the user can select the item (optional)
label = "Column" # Label the column select dropdown (optional)
),
filter = adte_filter_spec
)
devtools::load_all(".")
adte_filter_spec <- filter_spec(
vars = c("PARAMCD"), # only key variables are allowed
choices = c("OS", "PFS", "EFS"),
selected = "OS",
multiple = TRUE, # if multiple, then a spread is needed
label = "Choose endpoint",
sep = " - "
)
devtools::load_all(".")
adte_filter_spec <- filter_spec(
vars = c("PARAMCD"), # only key variables are allowed
choices = c("OS", "PFS", "EFS"),
selected = "OS",
multiple = TRUE, # if multiple, then a spread is needed
label = "Choose endpoint",
sep = " - "
)
is(adte_filter_spec, "DataExtractSpec")
class(adte_filter_spec)
adte_extracted1 <- data_extract_spec(
dataname = "ADTE",
columns = column_choices_spec(
choices = c("AVAL", "AVALU", "BMRKR1", "SITEID"),
selected = c("AVAL"),
multiple = FALSE,
show = TRUE, # Whether the user can select the item (optional)
label = "Column" # Label the column select dropdown (optional)
),
filter = adte_filter_spec
)
class(adte_extracted1)
is(adte_extracted1, "DataExtractSpec")
length(c(1,2))
length(c(1,2)) == 2L
?purrr::detect
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
?structure
x <- data_for_teal(
modified_data,
c("USUBJID", "STUDYID"),
"radsl(N = 600)  %>% dplyr::mutate(A = 1)"
)
ASL <- radsl(N = 600)
ADTE <- radtte(ASL, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
modified_data <- ASL %>% mutate(A = 1)
x <- data_for_teal(
modified_data,
c("USUBJID", "STUDYID"),
"radsl(N = 600)  %>% dplyr::mutate(A = 1)"
)
attr(x, "keys")
attributes(y) <- NULL
attr(x, "keys")
y <- x
attributes(y) <- NULL
attr(x, "keys")
Dataset <- R6::R6Class( # nolint
"Dataset",
## Dataset ====
## __Public Methods ====
public = list(
raw_data = NULL,
dataname = NULL,
keys = NULL,
source = NULL,
initialize = function(raw_data, dataname, keys, source = NULL) {
stopifnot(is.data.frame(raw_data))
stopifnot(is.character(dataname) && length(dataname) == 1)
stopifnot(is.character(keys))
stopifnot(is.null(source) || (is.character(source) && length(source) == 1))
self$raw_data <- raw_data
self$dataname <- dataname
self$keys <- keys
self$source <- source
}
to_teal_data = function() {
structure(self$raw_data, dataname=self$dataname, keys=self$keys, source=self$source)
}
from_teal_data = function(teal_data) {
browser()
attributes(teal_data)
raw_data <- teal_data
attributes(raw_data) <- NULL
Dataset$new(
raw_data = raw_data,
dataname = attr(teal_data, "dataname"),
keys = attr(teal_data, "keys"),
source = attr(teal_data, "source")
)
}
)
)
Dataset <- R6::R6Class( # nolint
"Dataset",
## Dataset ====
## __Public Methods ====
public = list(
raw_data = NULL,
dataname = NULL,
keys = NULL,
source = NULL,
initialize = function(raw_data, dataname, keys, source = NULL) {
stopifnot(is.data.frame(raw_data))
stopifnot(is.character(dataname) && length(dataname) == 1)
stopifnot(is.character(keys))
stopifnot(is.null(source) || (is.character(source) && length(source) == 1))
self$raw_data <- raw_data
self$dataname <- dataname
self$keys <- keys
self$source <- source
}
to_teal_data = function() {
structure(self$raw_data, dataname=self$dataname, keys=self$keys, source=self$source)
}
)
)
from_teal_data = function(teal_data) {
browser()
attributes(teal_data)
raw_data <- teal_data
attributes(raw_data) <- NULL
Dataset$new(
raw_data = raw_data,
dataname = attr(teal_data, "dataname"),
keys = attr(teal_data, "keys"),
source = attr(teal_data, "source")
)
}
Dataset <- R6::R6Class( # nolint
"Dataset",
## Dataset ====
## __Public Methods ====
public = list(
raw_data = NULL,
dataname = NULL,
keys = NULL,
source = NULL,
initialize = function(raw_data, dataname, keys, source = NULL) {
stopifnot(is.data.frame(raw_data))
stopifnot(is.character(dataname) && length(dataname) == 1)
stopifnot(is.character(keys))
stopifnot(is.null(source) || (is.character(source) && length(source) == 1))
self$raw_data <- raw_data
self$dataname <- dataname
self$keys <- keys
self$source <- source
}
to_teal_data = function() {
structure(self$raw_data, dataname=self$dataname, keys=self$keys, source=self$source)
}
)
)
Dataset <- R6::R6Class( # nolint
"Dataset",
## Dataset ====
## __Public Methods ====
public = list(
raw_data = NULL,
dataname = NULL,
keys = NULL,
source = NULL,
initialize = function(raw_data, dataname, keys, source = NULL) {
stopifnot(is.data.frame(raw_data))
stopifnot(is.character(dataname) && length(dataname) == 1)
stopifnot(is.character(keys))
stopifnot(is.null(source) || (is.character(source) && length(source) == 1))
self$raw_data <- raw_data
self$dataname <- dataname
self$keys <- keys
self$source <- source
}
to_teal_data = function() {
structure(self$raw_data, dataname=self$dataname, keys=self$keys, source=self$source)
}
)
)
Dataset <- R6::R6Class( # nolint
"Dataset",
## Dataset ====
## __Public Methods ====
public = list(
raw_data = NULL,
dataname = NULL,
keys = NULL,
source = NULL,
initialize = function(raw_data, dataname, keys, source = NULL) {
stopifnot(is.data.frame(raw_data))
stopifnot(is.character(dataname) && length(dataname) == 1)
stopifnot(is.character(keys))
stopifnot(is.null(source) || (is.character(source) && length(source) == 1))
self$raw_data <- raw_data
self$dataname <- dataname
self$keys <- keys
self$source <- source
},
to_teal_data = function() {
structure(self$raw_data, dataname=self$dataname, keys=self$keys, source=self$source)
}
)
)
from_teal_data = function(teal_data) {
browser()
attributes(teal_data)
raw_data <- teal_data
attributes(raw_data) <- NULL
Dataset$new(
raw_data = raw_data,
dataname = attr(teal_data, "dataname"),
keys = attr(teal_data, "keys"),
source = attr(teal_data, "source")
)
}
from_teal_data(x)
attributes(teal_data)
attributes(teal_data)
names(attributes(teal_data))
names(mostattributes(teal_data))
teal_data
x
attributes(x)
# returns TRUE if the list is empty or all entries have names
is_named_list <- function(lst) {
if (!is.list(lst)) {
return(FALSE)
}
(is.null(names(lst)) && length(lst) == 0) || (!is.null(names(lst)) && sum(names(lst) != "") == length(lst))
}
?attr
devtools::load_all(".")
runApp('tests/testthat/app')
stopifnot(is_named_list(datasets))
# set dataname attribute
dataset_names <- names(datasets)
dataset_names
datasets <- lapply(seq_along(datasets), function(i) structure(datasets[[i]], dataname = dataset_names[[i]]))
View(datasets)
attr(datasets[[1]], "dataname")
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
dataset_names <- names(datasets)
datasets <- lapply(seq_along(datasets), function(i) structure(datasets[[i]], dataname = dataset_names[[i]]))
names(datasets)
names(datasets) <- dataset_names
devtools::load_all(".")
runApp('tests/testthat/app')
test.nest::test_lintr()
test.nest::test_lintr()
styler:::style_active_file()
test.nest::test_lintr()
test.nest::test_lintr()
styler:::style_active_file()
test.nest::test_lintr()
test_that("is_named_list works", {
expect_true(is_named_list(list()))
expect_true(is_named_list(list(a=1)))
expect_false(is_named_list(list(a=1, 2)))
})
expect_true(is_named_list(list()))
test.nest::test_lintr()
test.nest::test_strict()
test.nest::test_strict()
test.nest::test_lintr()
test.nest::test_strict()
library(automation.utils)
project_type <- "Rpackage"
organization_name <- "mordigm" # organization_name can also be a user directory like "waddella" or "mordigm"
is_organization <- FALSE # whether the above is an organization or a user
repo_name <- "testRpkg2"
project_type <- "Rpackage"
organization_name <- "mordigm" # organization_name can also be a user directory like "waddella" or "mordigm"
is_organization <- FALSE # whether the above is an organization or a user
repo_name <- "testRpkg2"
github_api_server <- "https://github.roche.com/api/v3"
# must be API token valid to push to repo, .drone.yml assumes this corresponds to user "mordigm" currently
github_repo_token <- "47b1a51a194f92677eb13c9c3a415ed712504069"
# the user with this token must have push access to the GitHub repo and also be an administrator for Drone (to enable trusted mode);
# you can do from the Drone CLI (with credentials from a Drone admin user to make another user an admin): user=waddella; drone user rm "$user"; drone user add --admin=true "$user"
drone_server_token <- "Y9v0oiMJYsAdh32Svj7UNtoQEYYa9uQx"
stop("Please check params")
change_branch_protection(repo_metadata, "master", get_unruled_branch_policy())
repo_metadata <- c(organization_name=organization_name, repo_name=repo_name, github_api_server=github_api_server, github_token=github_repo_token)
change_branch_protection(repo_metadata, "master", get_unruled_branch_policy())
change_branch_protection(repo_metadata, "devel", get_unruled_branch_policy())
?utils::download.file
is.character(null)
tempfile()
#' @concept automation_init
#'
#' @examples
#' \dontrun{
#' filename <- tempfile()
#' content <- download_drone_yaml("Rpackage", filename)
#' expect_true(content, read_file(filename))
#'
#' content <- download_drone_yaml("Rpackage", tempfile())
#' }
download_drone_yaml <- function(project_type, dest_file) {
stopifnot(is.character(project_type))
stopifnot(is.character(dest_file))
template_filename <- switch(project_type,
Rpackage="Rpackage/all.yaml",
hugo="hugo/push_pr_master_devel.yaml",
bookdown="bookdown/push_pr_master_devel.yaml",
summary_doc="summary_doc/push_pr_master_devel.yaml",
stop(glue_with_null(".drone.yaml for type '{type}' not yet available"))
)
github_template_url <- glue_with_null(
"https://raw.github.roche.com/mordigm/automationTest/master/droneio/droneyaml/{template_filename}")
utils::download.file(github_template_url, destfile = dest_file, method = "auto")
read_file(dest_file)
}
change_branch_protection(repo_metadata, "master", get_unruled_branch_policy())
change_branch_protection(repo_metadata, "devel", get_unruled_branch_policy())
download_drone_yaml("Rpackage", tempfile())
library(automation.utils)
library(shinytest) # needs shinytest::installDependencies() for headless browser (execute as root, before run mkdir /root/bin/phantomjs)
context("Test shiny app")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
library(shinytest) # needs shinytest::installDependencies() for headless browser (execute as root, before run mkdir /root/bin/phantomjs)
context("Test shiny app")
devtools::test()
getwd)()
getwd()
library(shinytest) # needs shinytest::installDependencies() for headless browser (execute as root, before run mkdir /root/bin/phantomjs)
context("Test shiny app")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
devtools::test()
devtools::load_all(".")
?ShinyDriver$new
?ShinyDriver
devtools::check()
devtools::test()
devtools::load_all(".")
devtools::test()
devtools::test()
devtools::test()
