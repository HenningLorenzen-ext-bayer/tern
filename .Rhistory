header_y
header_x
combine_rrows_with_indent(header_x, header_y)
do.call(rheader, combine_rrows_with_indent(header_x, header_y))
debugonce(combine_rheaders)
t_events_per_term_grade_id(
terms = ADAE$AEDECOD,
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
total = "All Patients",
grade_levels = 1:5
)
do.call(rheader, combine_rrows_with_indent(header_x, header_y))
t_events_per_term_grade_id(
terms = ADAE$AEDECOD,
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
total = "All Patients",
grade_levels = 1:5
)
tree@format_data[["left_header"]]
debugonce(combine_rheaders)
header_x
header_y
header_x <- do.call(
rheader,
c(
remove_attributes(header_x),
replicate(nrow(header_y) - nrow(header_x), rrow(NULL, rep("-", ncol(header_x))), simplify = FALSE)
)
)
header_x
devtools::load_all(".")
t_events_per_term_grade_id(
terms = ADAE$AEDECOD,
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
total = "All Patients",
grade_levels = 1:5
)
t_events_per_term_grade_id(
terms = ADAE$AEDECOD,
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
total = "All Patients",
grade_levels = 1:5
)
debugonce(combine_rheaders)
header_x
header_y
combine_rrows_with_indent(header_x, header_y)
do.call(rheader, combine_rrows_with_indent(header_x, header_y))
devtools::load_all(".")
t_events_per_term_grade_id(
terms = ADAE$AEDECOD,
id = ADAE$USUBJID,
grade = ADAE$AETOXGR,
col_by = ADAE$ARM,
col_N = table(ADSL$ARM),
total = "All Patients",
grade_levels = 1:5
)
header_label
nrows_header
replicate(-2, "a")
replicate(-1, "a")
replicate(3, "")
devtools::load_all(".")
library(dplyr)
library(random.cdisc.data)
ADSL <- radsl(cached = TRUE)
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
devtools::load_all(".")
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
tree@content
tree[[1,1]]
summary(tree)
tree[[1]]
header(tree[[1]])
`header<-`
debugonce(add_header_on_left)
left_header
debugonce(add_header_on_left)
devtools::load_all(".")
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
debugonce(add_header_on_left)
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
left_header
combine_rheaders(left_header, header(content))
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
devtools::load_all(".")
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
combine_rheaders(left_header, header(content))
res1 <- add_header_on_left
res1 <- combine_rheaders(left_header, header(content))
res1
res1[[1]]
ncol(res1[[1]])
rheader
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
left_header
left_header
devtools::load_all(".")
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
rownames_header
?rheader
rheader(rrow(NULL, row_by_lbl), rrow(NULL, x_lbl, indent = 1))
rownames_header <- rheader(rrow(NULL, row_by_lbl), rrow(NULL, x_lbl, indent = 1))
add_header_on_left(tree, rownames_header)
combine_rheaders(left_header, header(content))
header(content) <- combine_rheaders(left_header, header(content))
devtools::load_all(".")
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
to_rtable(tree)
c(
x@format_data[["left_header"]],
replicate(nrow(header(tbl)) - length(x@format_data[["left_header"]]), "")
)
row_names_as_col(
tbl,
c(
x@format_data[["left_header"]],
replicate(nrow(header(tbl)) - length(x@format_data[["left_header"]]), "")
)
)
ncol(tbl)
nrow(tbl)
devtools::load_all(".")
library(random.cdisc.data)
library(dplyr)
library(purrr)
ADSL <- radsl(seed = 1)
ADSL$'FAKE Name > -1.3 Flag' <- rep(c('Y', 'N'), 50)
ADRS <- radrs(ADSL, seed = 2)
ADRS_f <- subset(ADRS, PARAMCD == "BESRSPI") %>%
dplyr::filter(ARM != 'C: Combination') %>%
mutate(ARM = droplevels(ARM))
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
row_by_list = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>%
map(as_factor_keep_attributes)
)
tbl
row_by_list
lapply(row_by_list, function(rows_by) esplit(df, rows_by))
rows_by
row_by_list
devtools::load_all(".")
library(random.cdisc.data)
library(dplyr)
library(purrr)
ADSL <- radsl(seed = 1)
ADSL$'FAKE Name > -1.3 Flag' <- rep(c('Y', 'N'), 50)
ADRS <- radrs(ADSL, seed = 2)
ADRS_f <- subset(ADRS, PARAMCD == "BESRSPI") %>%
dplyr::filter(ARM != 'C: Combination') %>%
mutate(ARM = droplevels(ARM))
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
row_by_list = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>%
map(as_factor_keep_attributes)
)
tbl
rsplit_to_tree(
df,
by_lst = row_by_list,
drop_empty_levels = TRUE,
non_leaves_null = TRUE
)
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
row_by_list = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>%
map(as_factor_keep_attributes)
)
tbl
rsplit_to_tree(
df,
by_lst = r_by(row_by_list),
drop_empty_levels = TRUE,
non_leaves_null = TRUE
)
summary(rsplit_to_tree(
df,
by_lst = r_by(row_by_list),
drop_empty_levels = TRUE,
non_leaves_null = TRUE
))
dfs <- lapply(row_by_list, function(rows_by) esplit(df, rows_by))
# nested structure, e.g. dfs$SEX$M -> dfs[['SEX']][['M']]
data_tree <- nested_list_to_tree(dfs, format_data = node_format_data(children_gap =  0), max_depth = 1)
data_tree
summary(data_tree)
summary(rsplit_to_tree(
df,
by_lst = r_by(row_by_list),
drop_empty_levels = TRUE,
non_leaves_null = TRUE
))
row_by_list
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
row_by_list = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>%
map(as_factor_keep_attributes)
)
tbl
dfs <- lapply(row_by_list, function(rows_by) esplit(df, rows_by))
dfs
row_by_list
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
row_by_list = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>%
map(as_factor_keep_attributes)
)
tbl
nested_list_to_tree
dfs
nested_list_to_tree
dfs[[1]]
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
row_by_list = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>%
map(as_factor_keep_attributes)
)
tbl
devtools::load_all(".")
tbl <- t_forest_rsp(
rsp = ADRS_f$AVALC %in% c("CR", "PR"),
col_by = as_factor_keep_attributes(ADRS_f$ARM),
row_by_list = ADRS_f[, c("SEX", "RACE", "FAKE Name > -1.3 Flag")] %>%
map(as_factor_keep_attributes)
)
tbl
devtools::run_examples()
devtools::run_examples()
objecvt
object
devtools::run_examples(run = FALSE)
ADSL$COUNTRY
devtools::run_examples(run = FALSE)
devtools::load_all(".")
library(dplyr)
library(random.cdisc.data)
ADSL <- radsl(cached = TRUE)
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
is.atomic(row_by)
row_by
devtools::load_all(".")
t_summary_by(
x = ADSL$SEX,
row_by = ADSL$COUNTRY,
col_by = ADSL$ARMCD,
total = "All Patients",
drop_levels = TRUE
)
devtools::run_examples(run = FALSE)
devtools::load_all(".")
devtools::run_examples(run = FALSE)
devtools::load_all(".")
devtools::run_examples(run = FALSE)
Q
devtools::run_examples(run = FALSE, start = "t_events_per_term_grade_id.Rd")
devtools::run_examples(run = FALSE, start = "t_events_per_term_grade_id.Rd")
print(f)
devtools::run_examples(run = FALSE, start = "t_events_per_term_grade_id.Rd")
header_label
devtools::run_examples(run = FALSE, start = "t_events_per_term_grade_id.Rd")
warnings()
warnings()
library(dplyr)
library(random.cdisc.data)
ADSL <- radsl(cached = TRUE)
ADSL <- radsl(cached = TRUE)
ADSL <- ADSL %>% select(STUDYID, USUBJID, ARMCD)
ADQS <- radqs(ADSL, seed = 2) %>%
mutate(PARAM = as.factor(PARAM)) %>%
var_relabel(
PARAM = "Questionnaire Parameter",
AVISIT = "Visit"
)
t_summary_by(
x = ADQS[,c("AVAL", "CHG")],
row_by = r_by(ADQS[, c("PARAM", "AVISIT")]),
col_by = ADQS$ARMCD,
col_N = table(ADSL$ARMCD),
total = "All Patients"
)
suppressWarnings(t_summary_by(
x = ADQS[,c("AVAL", "CHG")],
row_by = r_by(ADQS[, c("PARAM", "AVISIT")]),
col_by = ADQS$ARMCD,
col_N = table(ADSL$ARMCD),
total = "All Patients"
))
devtools::load_all(".")
devtools::run_examples(run = FALSE)
?rtables:::by_hierarchical
SEX <- with_label(factor(c("M", "M", "F", "F", "F")), "Sex")
AGEC <- with_label(factor(c("<40", ">40", "<40", ">40", "<40")), "Age Category")
VAL <- c(5, 4, 4, 6, 2, 1)
rtables:::by_hierarchical(SEX)
rtables:::by_hierarchical(SEX, AGEC)
getwd()
remove.packages("rtables")
install.packages("../rtables", repos = NULL, type="source")
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
library(random.cdisc.data)
library(dplyr)
# with CDISC like data
ADSL <- radsl(cached = TRUE)
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
rtables:::by_hierarchical(ADSL$ARM, ADSL$SEX)
by_hierarchical <- rtables:::by_hierarchical
by_hierarchical <- rtables:::by_hierarchical
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
t_summary(ADSL[, c("SEX", "RACE")], col_by = by_hierarchical(ADSL$SEX, ADSL$RACE))
t_summary(ADSL[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL$ARM, ADSL$SEX))
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
t_summary(ADSL[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL$ARM, ADSL$SEX))
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F"))
t_summary(ADSL_f[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX))
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX)))
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
t_summary(ADSL_f[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX))
t_summary(ADSL_f[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
t_summary(ADSL_f$SEX, col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-")
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-")
remove.packages("rtables")
install.packages("../rtables", repos = NULL, type="source")
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
library(random.cdisc.data)
ADSL <- radsl(cached = TRUE)
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
library(dplyr)
by_hierarchical <- rtables:::by_hierarchical
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
devtools::load_all(".")
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
t_summary(ADSL_f$SEX, col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
remove.packages("rtables")
install.packages("../rtables", repos = NULL, type="source")
by_hierarchical <- rtables:::by_hierarchical
by_hierarchical <- rtables:::by_hierarchical
library(random.cdisc.data)
ADSL <- radsl(cached = TRUE)
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
devtools::load_all(".")
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
library(dplyr)
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
t_summary(ADSL_f$SEX, col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
t_summary(ADSL_f[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
devtools::load_all(".")
t_summary(ADSL_f[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
col_by
attr(col_by, "header")
col_by
attr(replicate(length(x), col_by, simplify = FALSE)[[1]], "header")
devtools::load_all(".")
debugonce(t_summary.list)
t_summary(ADSL_f[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
attr(col_by_list[[1]], "header")
debugonce(t_summary)
x
col_by
attr(col_by, "header")
remove.packages("rtables")
install.packages("../rtables", repos = NULL, type="source")
library(dplyr)
library(random.cdisc.data)
ADSL <- radsl(cached = TRUE)
devtools::load_all(".")
ADSL <- radsl(cached = TRUE)
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
t_summary(ADSL_f$SEX, col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
t_summary(ADSL_f[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
t_summary(ADSL_f[, c("SEX", "RACE")], col_by = by_hierarchical(ADSL_f$SEX, ADSL_f$RACE))
ADSL_f$RACE
count(ADSL_f$RACE)
table(ADSL_f$RACE)
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F"), RACE %in% c("ASIAN", "WHITE")) %>% mutate(SEX = droplevels(SEX), AGE = droplevels(AGE))
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F"), RACE %in% c("ASIAN", "WHITE"))
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F"), RACE %in% c("ASIAN", "WHITE")) %>% mutate(SEX = droplevels(SEX), AGE = droplevels(as.factor(AGE)))
t_summary(ADSL_f[, c("SEX", "RACE")], col_by = by_hierarchical(ADSL_f$SEX, ADSL_f$RACE))
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F"), RACE %in% c("ASIAN", "WHITE")) %>% mutate(SEX = droplevels(SEX), AGE = droplevels(as.factor(AGE)))
ADSL_f
t_summary(ADSL_f[, c("SEX", "RACE")], col_by = by_hierarchical(ADSL_f$SEX, ADSL_f$RACE))
ADSL_f$AGE
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F"), RACE %in% c("ASIAN", "WHITE")) %>% mutate(SEX = droplevels(SEX), RACE = droplevels(as.factor(RACE)))
t_summary(ADSL_f[, c("SEX", "RACE")], col_by = by_hierarchical(ADSL_f$SEX, ADSL_f$RACE))
t_summary(ADSL_f[, c("SEX", "RACE")], col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX))
colnames(ADSL_f)
t_summary(ADSL_f[, c("ITTFL", "BMRKR1")], col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX))
t_summary(ADSL_f[, c("ITTFL", "BMRKR1", "BEP01FL")], col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX))
t_summary(ADSL_f[, c("ITTFL", "BMRKR1", "BEP01FL")], col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX), total = "All")
col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX)
col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX)
t_summary
t_summary.numeric
total = "All"
by_add_total(col_by, label = total)
res1 <- by_add_total(col_by, label = total)
attr(res1, "header")
remove.packages("rtables")
install.packages("../rtables", repos = NULL, type="source")
devtools::load_all(".")
library(dplyr)
library(random.cdisc.data)
ADSL <- radsl(cached = TRUE)
t_summary(ADSL[, c("SEX", "AGE")], col_by = ADSL$ARM)
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F")) %>% mutate(SEX = droplevels(SEX))
t_summary(ADSL_f$SEX, col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
t_summary(ADSL_f[, c("SEX", "AGE")], col_by = by_hierarchical(ADSL_f$ARM, ADSL_f$SEX, sep = "-"))
ADSL_f <- ADSL %>% filter(SEX %in% c("M", "F"), RACE %in% c("ASIAN", "WHITE")) %>% mutate(SEX = droplevels(SEX), RACE = droplevels(as.factor(RACE)))
t_summary(ADSL_f[, c("SEX", "RACE")], col_by = by_hierarchical(ADSL_f$SEX, ADSL_f$RACE))
t_summary(ADSL_f[, c("SEX", "RACE")], col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX))
t_summary(ADSL_f[, c("ITTFL", "BMRKR1", "BEP01FL")], col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX))
t_summary(ADSL_f[, c("ITTFL", "BMRKR1", "BEP01FL")], col_by = by_hierarchical(ADSL_f$RACE, ADSL_f$SEX), total = "All")
remove.packages("rtables")
install.packages("../rtables", repos = NULL, type="source")
remove.packages("rtables")
remove.packages("rtables")
install.packages("../rtables", repos = NULL, type="source")
devtools::run_examples()
devtools::run_examples(run = FALSE)
devtools::check()
devtools::check()
devtools::check()
demo()
